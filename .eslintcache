[{"/Users/nate/nate/pantry-web/src/index.tsx":"1","/Users/nate/nate/pantry-web/src/reportWebVitals.ts":"2","/Users/nate/nate/pantry-web/src/App.tsx":"3","/Users/nate/nate/pantry-web/src/constants/COLORS.ts":"4","/Users/nate/nate/pantry-web/src/components/StyledText.tsx":"5","/Users/nate/nate/pantry-web/src/components/DOM.tsx":"6","/Users/nate/nate/pantry-web/src/config/firebase.config.ts":"7","/Users/nate/nate/pantry-web/src/firebase.js":"8","/Users/nate/nate/pantry-web/src/screens/Home.tsx":"9","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx":"10","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx":"11","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx":"12","/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts":"13","/Users/nate/nate/pantry-web/src/api/client/registerClient.ts":"14","/Users/nate/nate/pantry-web/src/services/firebase.service.tsx":"15","/Users/nate/nate/pantry-web/src/helpers/FirestoreHelper.tsx":"16","/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts":"17","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx":"18","/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts":"19","/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts":"20","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx":"21","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx":"22","/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx":"23","/Users/nate/nate/pantry-web/src/global/globalState.tsx":"24","/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts":"25","/Users/nate/nate/pantry-web/src/components/Header.tsx":"26","/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx":"27"},{"size":500,"mtime":1606959212220,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1606959212221,"results":"30","hashOfConfig":"29"},{"size":2512,"mtime":1609450581454,"results":"31","hashOfConfig":"29"},{"size":438,"mtime":1607054762728,"results":"32","hashOfConfig":"29"},{"size":1040,"mtime":1606966881447,"results":"33","hashOfConfig":"29"},{"size":1529,"mtime":1606966879929,"results":"34","hashOfConfig":"29"},{"size":332,"mtime":1606968241716,"results":"35","hashOfConfig":"29"},{"size":373,"mtime":1609294399085,"results":"36","hashOfConfig":"29"},{"size":3578,"mtime":1609449962918,"results":"37","hashOfConfig":"29"},{"size":8256,"mtime":1609448176179,"results":"38","hashOfConfig":"29"},{"size":12809,"mtime":1609448266135,"results":"39","hashOfConfig":"29"},{"size":1266,"mtime":1609296866560,"results":"40","hashOfConfig":"29"},{"size":2985,"mtime":1608354771033,"results":"41","hashOfConfig":"29"},{"size":499,"mtime":1609297059642,"results":"42","hashOfConfig":"29"},{"size":840,"mtime":1609294939534,"results":"43","hashOfConfig":"29"},{"size":1605,"mtime":1609378349710,"results":"44","hashOfConfig":"29"},{"size":494,"mtime":1609446247279,"results":"45","hashOfConfig":"29"},{"size":1262,"mtime":1609448013289,"results":"46","hashOfConfig":"29"},{"size":499,"mtime":1609379733692,"results":"47","hashOfConfig":"29"},{"size":496,"mtime":1609446240024,"results":"48","hashOfConfig":"29"},{"size":7970,"mtime":1609448277648,"results":"49","hashOfConfig":"29"},{"size":1154,"mtime":1609381388414,"results":"50","hashOfConfig":"29"},{"size":5499,"mtime":1609449826945,"results":"51","hashOfConfig":"29"},{"size":891,"mtime":1609449028486,"results":"52","hashOfConfig":"29"},{"size":209,"mtime":1609446152845,"results":"53","hashOfConfig":"29"},{"size":3068,"mtime":1609450166146,"results":"54","hashOfConfig":"29"},{"size":3636,"mtime":1609450431255,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1uv1hoe",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/nate/nate/pantry-web/src/index.tsx",[],["113","114"],"/Users/nate/nate/pantry-web/src/reportWebVitals.ts",[],"/Users/nate/nate/pantry-web/src/App.tsx",["115"],"/Users/nate/nate/pantry-web/src/constants/COLORS.ts",[],"/Users/nate/nate/pantry-web/src/components/StyledText.tsx",[],"/Users/nate/nate/pantry-web/src/components/DOM.tsx",[],"/Users/nate/nate/pantry-web/src/config/firebase.config.ts",[],"/Users/nate/nate/pantry-web/src/firebase.js",[],"/Users/nate/nate/pantry-web/src/screens/Home.tsx",["116","117"],"import {\n  Button,\n  Container,\n  Grid,\n  makeStyles,\n  Theme,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { View } from \"react-native-web\";\nimport { useHistory } from \"react-router-dom\";\nimport { COLORS } from \"../constants/COLORS\";\nimport { useGlobalContext } from \"../global/globalState\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}));\n\nexport function Home() {\n  const theme = useTheme<Theme>();\n  const classes = useStyles();\n  const mobileDevice = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  let history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      {/* <CssBaseline /> */}\n      <div className={classes.paper}>\n        <Grid container spacing={2} style={{ marginTop: 12 }}>\n          {!globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                  marginRight: mobileDevice ? 0 : 16,\n                  marginBottom: mobileDevice ? 16 : 0,\n                  width: \"100%\",\n                }}\n                onClick={() => {\n                  history.push(\"/pantry/register\");\n                }}\n              >\n                Pantry Registration\n              </Button>\n            </Grid>\n          ) : null}\n          {!globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                  marginRight: mobileDevice ? 0 : 16,\n                  marginBottom: mobileDevice ? 16 : 0,\n                  width: \"100%\",\n                }}\n                onClick={() => {\n                  history.push(\"/pantry/login\");\n                }}\n              >\n                Pantry Login\n              </Button>\n            </Grid>\n          ) : null}\n          {!globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                  marginRight: mobileDevice ? 0 : 16,\n                  marginBottom: mobileDevice ? 16 : 0,\n                  width: \"100%\",\n                }}\n              >\n                Pantry Admin Login\n              </Button>\n            </Grid>\n          ) : null}\n\n          <Grid item xs={12}>\n            <Button\n              style={{\n                backgroundColor: COLORS.primary,\n                color: COLORS.buttonTextColor,\n                marginBottom: mobileDevice ? 16 : 0,\n                width: \"100%\",\n              }}\n              onClick={() => {\n                history.push(\"/client/register\");\n              }}\n            >\n              Client Registration\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              style={{\n                backgroundColor: COLORS.primary,\n                color: COLORS.buttonTextColor,\n                marginBottom: mobileDevice ? 16 : 0,\n                width: \"100%\",\n              }}\n              onClick={() => {\n                history.push(\"/client/checkin\");\n              }}\n            >\n              Client Check-in\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx",[],"/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts",[],"/Users/nate/nate/pantry-web/src/api/client/registerClient.ts",[],"/Users/nate/nate/pantry-web/src/services/firebase.service.tsx",[],"/Users/nate/nate/pantry-web/src/helpers/FirestoreHelper.tsx",[],"/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts",[],"/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx",[],"/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx",["118"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { getPantry } from \"../../api/pantry/getPantry\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function PantryLogin() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Pantry Login</Typography>\n        <Formik\n          initialValues={{\n            pantryId: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          onSubmit={async (values) => {\n            const pantry = await getPantry({ id: `${values.pantryId}` });\n            if (!pantry) {\n              console.log(\"ERROR!!!!!!\");\n              return;\n            }\n            setGlobalState({\n              user: {\n                firstName: values.firstName,\n                lastName: values.lastName,\n                email: values.email,\n                pantry,\n              },\n            });\n            history.goBack();\n          }}\n          validationSchema={Yup.object().shape({\n            pantryId: Yup.number().required(),\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required(),\n          })}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            isValid,\n          }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"pantryId\"\n                    label=\"Pantry ID\"\n                    name=\"pantryId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.pantryId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    value={values.firstName}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    fullWidth\n                    required\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    required\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email Address\"\n                    fullWidth\n                    type=\"email\"\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor:\n                    !isValid || !values.pantryId\n                      ? COLORS.surface\n                      : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!isValid || !values.pantryId}\n              >\n                Login\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/global/globalState.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts",[],"/Users/nate/nate/pantry-web/src/components/Header.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx",["119","120","121","122","123"],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":69,"column":6,"nodeType":"130","endLine":69,"endColumn":8,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":11,"column":10,"nodeType":"134","messageId":"135","endLine":11,"endColumn":14},{"ruleId":"132","severity":1,"message":"136","line":30,"column":23,"nodeType":"134","messageId":"135","endLine":30,"endColumn":37},{"ruleId":"132","severity":1,"message":"137","line":41,"column":10,"nodeType":"134","messageId":"135","endLine":41,"endColumn":21},{"ruleId":"132","severity":1,"message":"138","line":13,"column":13,"nodeType":"134","messageId":"135","endLine":13,"endColumn":16},{"ruleId":"132","severity":1,"message":"139","line":14,"column":10,"nodeType":"134","messageId":"135","endLine":14,"endColumn":19},{"ruleId":"132","severity":1,"message":"140","line":40,"column":9,"nodeType":"134","messageId":"135","endLine":40,"endColumn":16},{"ruleId":"132","severity":1,"message":"137","line":41,"column":10,"nodeType":"134","messageId":"135","endLine":41,"endColumn":21},{"ruleId":"132","severity":1,"message":"136","line":41,"column":23,"nodeType":"134","messageId":"135","endLine":41,"endColumn":37},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["143"],"@typescript-eslint/no-unused-vars","'View' is defined but never used.","Identifier","unusedVar","'setGlobalState' is assigned a value but never used.","'globalState' is assigned a value but never used.","'Yup' is defined but never used.","'getPantry' is defined but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},"Update the dependencies array to be: [history]",{"range":"146","text":"147"},[2490,2492],"[history]"]