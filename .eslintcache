[{"/Users/nathangygi/src/pantry-web/src/index.tsx":"1","/Users/nathangygi/src/pantry-web/src/reportWebVitals.ts":"2","/Users/nathangygi/src/pantry-web/src/App.tsx":"3","/Users/nathangygi/src/pantry-web/src/components/Header.tsx":"4","/Users/nathangygi/src/pantry-web/src/global/globalState.tsx":"5","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx":"6","/Users/nathangygi/src/pantry-web/src/screens/PantryLookup/PantryLookup.tsx":"7","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx":"8","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx":"9","/Users/nathangygi/src/pantry-web/src/screens/Reports/Reports.tsx":"10","/Users/nathangygi/src/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx":"11","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx":"12","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx":"13","/Users/nathangygi/src/pantry-web/src/screens/PantryLogin/PantryLogin.tsx":"14","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx":"15","/Users/nathangygi/src/pantry-web/src/screens/ClientUpload/ClientUpload.tsx":"16","/Users/nathangygi/src/pantry-web/src/constants/COLORS.ts":"17","/Users/nathangygi/src/pantry-web/src/utils/useImmutableState.ts":"18","/Users/nathangygi/src/pantry-web/src/components/StyledText.tsx":"19","/Users/nathangygi/src/pantry-web/src/models/client.schema.ts":"20","/Users/nathangygi/src/pantry-web/src/api/pantry/lookupPantry.ts":"21","/Users/nathangygi/src/pantry-web/src/api/pantry/registerPantry.ts":"22","/Users/nathangygi/src/pantry-web/src/api/client/getAllPantryClients.ts":"23","/Users/nathangygi/src/pantry-web/src/api/client/registerClient.ts":"24","/Users/nathangygi/src/pantry-web/src/api/pantry/getPantry.ts":"25","/Users/nathangygi/src/pantry-web/src/components/DOM.tsx":"26","/Users/nathangygi/src/pantry-web/src/api/pantry/getNewPantryId.ts":"27","/Users/nathangygi/src/pantry-web/src/api/client/getNewClientId.ts":"28","/Users/nathangygi/src/pantry-web/src/api/client/lookupClient.ts":"29","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/checkInClient.ts":"30","/Users/nathangygi/src/pantry-web/src/services/firebase.service.tsx":"31","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/addCheckIn.ts":"32","/Users/nathangygi/src/pantry-web/src/config/firebase.config.ts":"33","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/getClientCheckinReport.ts":"34","/Users/nathangygi/src/pantry-web/src/models/clientCheckin.schema.ts":"35"},{"size":500,"mtime":1606959212000,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":1606959212000,"results":"38","hashOfConfig":"37"},{"size":3154,"mtime":1625277773399,"results":"39","hashOfConfig":"37"},{"size":3412,"mtime":1629775401599,"results":"40","hashOfConfig":"37"},{"size":913,"mtime":1612840435000,"results":"41","hashOfConfig":"37"},{"size":1298,"mtime":1614302937000,"results":"42","hashOfConfig":"37"},{"size":6083,"mtime":1614392884000,"results":"43","hashOfConfig":"37"},{"size":2243,"mtime":1625276751181,"results":"44","hashOfConfig":"37"},{"size":1904,"mtime":1625276836416,"results":"45","hashOfConfig":"37"},{"size":10566,"mtime":1629777725045,"results":"46","hashOfConfig":"37"},{"size":11908,"mtime":1629775429161,"results":"47","hashOfConfig":"37"},{"size":16356,"mtime":1629775314497,"results":"48","hashOfConfig":"37"},{"size":8330,"mtime":1629775203731,"results":"49","hashOfConfig":"37"},{"size":9848,"mtime":1613102582000,"results":"50","hashOfConfig":"37"},{"size":8511,"mtime":1614303015000,"results":"51","hashOfConfig":"37"},{"size":15233,"mtime":1629777822585,"results":"52","hashOfConfig":"37"},{"size":438,"mtime":1614384564000,"results":"53","hashOfConfig":"37"},{"size":2985,"mtime":1608354771000,"results":"54","hashOfConfig":"37"},{"size":1040,"mtime":1606966881000,"results":"55","hashOfConfig":"37"},{"size":1315,"mtime":1619969485000,"results":"56","hashOfConfig":"37"},{"size":813,"mtime":1613106385000,"results":"57","hashOfConfig":"37"},{"size":749,"mtime":1613106348000,"results":"58","hashOfConfig":"37"},{"size":680,"mtime":1625022037335,"results":"59","hashOfConfig":"37"},{"size":1185,"mtime":1625275118465,"results":"60","hashOfConfig":"37"},{"size":209,"mtime":1613106224000,"results":"61","hashOfConfig":"37"},{"size":1529,"mtime":1606966879000,"results":"62","hashOfConfig":"37"},{"size":495,"mtime":1613106290000,"results":"63","hashOfConfig":"37"},{"size":493,"mtime":1613106279000,"results":"64","hashOfConfig":"37"},{"size":893,"mtime":1619970825000,"results":"65","hashOfConfig":"37"},{"size":947,"mtime":1619971100000,"results":"66","hashOfConfig":"37"},{"size":976,"mtime":1613106448000,"results":"67","hashOfConfig":"37"},{"size":528,"mtime":1613106361000,"results":"68","hashOfConfig":"37"},{"size":332,"mtime":1606968241000,"results":"69","hashOfConfig":"37"},{"size":1696,"mtime":1625026103520,"results":"70","hashOfConfig":"37"},{"size":389,"mtime":1629777394853,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"18xzhfx",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nathangygi/src/pantry-web/src/index.tsx",[],["149","150"],"/Users/nathangygi/src/pantry-web/src/reportWebVitals.ts",[],"/Users/nathangygi/src/pantry-web/src/App.tsx",["151","152"],"import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { GlobalContextProvider, useGlobalContext } from \"./global/globalState\";\nimport { ClientCheckin } from \"./screens/ClientCheckin/ClientCheckin\";\nimport { ClientRegistrationHouseholdInfo } from \"./screens/ClientRegistration/ClienRegistrationHouseholdInfo\";\nimport { ClientRegistration } from \"./screens/ClientRegistration/ClientRegistration\";\nimport { ClientRegistrationProvider } from \"./screens/ClientRegistration/ClientRegistrationState\";\nimport { ClientRegistrationSuccess } from \"./screens/ClientRegistration/ClientRegistrationSuccess\";\nimport { ClientUpload } from \"./screens/ClientUpload/ClientUpload\";\nimport { PantryLogin } from \"./screens/PantryLogin/PantryLogin\";\nimport { PantryLookup } from \"./screens/PantryLookup/PantryLookup\";\nimport { PantryRegistration } from \"./screens/PantryRegistration/PantryRegistration\";\nimport { PantryRegistrationSuccess } from \"./screens/PantryRegistration/PantryRegistrationSuccess\";\nimport { Reports } from \"./screens/Reports/Reports\";\n\nexport default function App() {\n  return (\n    <GlobalContextProvider>\n      <Router>\n        <Header />\n        <div>\n          <Switch>\n            <Route exact path=\"/client/checkin\">\n              <ClientCheckin />\n            </Route>\n            <Route exact path=\"/pantry/lookup\">\n              <PantryLookup />\n            </Route>\n            <Route exact path=\"/\">\n              <BaseRoute />\n            </Route>\n            <Route exact path=\"/pantry/register\">\n              <PantryRegistration />\n            </Route>\n            <Route exact path=\"/pantry/register/success/:pantryId\">\n              <PantryRegistrationSuccess />\n            </Route>\n            <Route exact path=\"/pantry/login\">\n              <PantryLogin />\n            </Route>\n            <ClientRegistrationProvider>\n              <Route exact path=\"/client/register/:pantryId\">\n                <ClientRegistration />\n              </Route>\n              <Route exact path=\"/client/register/householdInfo/:pantryId\">\n                <ClientRegistrationHouseholdInfo />\n              </Route>\n              <Route exact path=\"/client/register/success\">\n                <ClientRegistrationSuccess />\n              </Route>\n              <Route exact path=\"/client/upload\">\n                <ClientUpload />\n              </Route>\n              <Route exact path=\"/reports\">\n                <Reports />\n              </Route>\n            </ClientRegistrationProvider>\n          </Switch>\n        </div>\n      </Router>\n    </GlobalContextProvider>\n  );\n}\n\nfunction BaseRoute() {\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    } else {\n      history.push(\"/pantry/login\");\n    }\n  }, []);\n  return null;\n}\n","/Users/nathangygi/src/pantry-web/src/components/Header.tsx",[],"/Users/nathangygi/src/pantry-web/src/global/globalState.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/PantryLookup/PantryLookup.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx",["153"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useClientRegistrationContext } from \"./ClientRegistrationState\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n}));\n\nexport function ClientRegistrationSuccess() {\n  const classes = useStyles();\n  const [clientRegistrationState] = useClientRegistrationContext();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>The Client ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {clientRegistrationState.id}\n        </StyledText>\n        <StyledText>\n          Give this ID to the client and tell them to remember it.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n            marginBottom: 64,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n        {/* <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <Typography>Success!</Typography>\n        <Typography>Your Client ID is:</Typography>\n        <Typography>{clientRegistrationState.id}</Typography> */}\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx",["154"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { COLORS } from \"../../constants/COLORS\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport function PantryRegistrationSuccess() {\n  const classes = useStyles();\n  const { pantryId } = useParams<any>();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>Your Pantry ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {pantryId}\n        </StyledText>\n        <StyledText>\n          Keep track of this ID, the password, and the admin password.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n            marginBottom: 64,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/Reports/Reports.tsx",["155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177"],"/Users/nathangygi/src/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx",["178","179","180"],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx",["181","182"],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/PantryLogin/PantryLogin.tsx",["183","184","185"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { getPantry } from \"../../api/pantry/getPantry\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function PantryLogin() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [selectedRadioButton, setSelectedRadioButton] = useState<\n    \"volunteer\" | \"admin\"\n  >(\"volunteer\");\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Login</Typography>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            row\n            aria-label=\"position\"\n            name=\"position\"\n            style={{ marginTop: 8 }}\n            value={selectedRadioButton}\n            onChange={(event) => {\n              if (\n                event.target.value === \"volunteer\" ||\n                event.target.value === \"admin\"\n              ) {\n                setSelectedRadioButton(event.target.value);\n              }\n            }}\n          >\n            <FormControlLabel\n              value=\"volunteer\"\n              control={<Radio color=\"primary\" />}\n              label=\"Volunteer\"\n            />\n            <FormControlLabel\n              value=\"admin\"\n              control={<Radio color=\"primary\" />}\n              label=\"Admin\"\n            />\n          </RadioGroup>\n        </FormControl>\n        <Formik\n          initialValues={{\n            pantryId: \"\",\n            password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          onSubmit={async (values) => {\n            const pantry = await getPantry({ id: `${values.pantryId}` });\n            if (!pantry) {\n              setErrorMessage(\"Invalid Pantry ID\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"volunteer\" &&\n              pantry.password !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"admin\" &&\n              pantry.adminPassword !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            const user = {\n              firstName: values.firstName,\n              lastName: values.lastName,\n              email: values.email,\n              pantry,\n              isAdmin: selectedRadioButton === \"admin\",\n            };\n            setGlobalState({\n              user,\n            });\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            history.push(\"/client/checkin\");\n          }}\n          validationSchema={Yup.object().shape({\n            pantryId: Yup.number().required(),\n            password: Yup.string().required(),\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required(),\n          })}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            isValid,\n          }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"pantryId\"\n                    label=\"Pantry ID\"\n                    name=\"pantryId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.pantryId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"password\"\n                    name=\"password\"\n                    label={\n                      selectedRadioButton === \"volunteer\"\n                        ? \"Password\"\n                        : \"Admin Password\"\n                    }\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"password\"\n                    value={values.password}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    value={values.firstName}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    fullWidth\n                    required\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    required\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email Address\"\n                    fullWidth\n                    type=\"email\"\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor:\n                    !isValid || !values.pantryId\n                      ? COLORS.surface\n                      : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!isValid || !values.pantryId}\n              >\n                Login\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New? Register your pantry to get started.\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/register\");\n          }}\n        >\n          Register Your Pantry\n        </Button>\n        <StyledText\n          style={{ color: COLORS.primary, marginTop: 16, marginBottom: 8 }}\n        >\n          Forgot your Pantry ID?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/lookup\");\n          }}\n        >\n          Lookup Pantry ID\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientUpload/ClientUpload.tsx",["186","187","188","189","190"],"/Users/nathangygi/src/pantry-web/src/constants/COLORS.ts",[],"/Users/nathangygi/src/pantry-web/src/utils/useImmutableState.ts",[],"/Users/nathangygi/src/pantry-web/src/components/StyledText.tsx",[],"/Users/nathangygi/src/pantry-web/src/models/client.schema.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/lookupPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/registerPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/getAllPantryClients.ts",["191"],"import _ from \"lodash\";\nimport moment from \"moment\";\nimport { Client } from \"../../models/client.schema\";\nimport { getPantryFirestore } from \"../../services/firebase.service\";\n\nexport async function getAllPantryClients(p: { pantryId: string }) {\n  let clients: Client[] = [];\n  const r = await getPantryFirestore().Client.query({\n    where: [{ registeredPantries: { [p.pantryId]: [\"==\", true] } }],\n    limit: 400,\n  });\n\n  clients = _.concat(clients, r.docs);\n  let nextQuery = r.nextQuery;\n\n  while (nextQuery) {\n    const r2 = await getPantryFirestore().Client.query(nextQuery);\n\n    clients = _.concat(clients, r2.docs);\n    nextQuery = r2.nextQuery;\n  }\n\n  return clients;\n}\n","/Users/nathangygi/src/pantry-web/src/api/client/registerClient.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/getPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/components/DOM.tsx",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/getNewPantryId.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/getNewClientId.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/lookupClient.ts",[],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/checkInClient.ts",[],"/Users/nathangygi/src/pantry-web/src/services/firebase.service.tsx",[],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/addCheckIn.ts",[],"/Users/nathangygi/src/pantry-web/src/config/firebase.config.ts",[],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/getClientCheckinReport.ts",["192"],"import _ from \"lodash\";\nimport moment from \"moment\";\nimport { Client } from \"../../models/client.schema\";\nimport { ClientCheckin } from \"../../models/clientCheckin.schema\";\nimport { getPantryFirestore } from \"../../services/firebase.service\";\n\nexport async function getClientCheckinReport(p: {\n  pantryId: string;\n  startDateMS: number;\n  endDateMS: number;\n}) {\n  let clientCheckins: ClientCheckin[] = [];\n  let clientCheckinsAndClients: {\n    clientCheckIn: ClientCheckin;\n    client: Client;\n  }[] = [];\n  const r = await getPantryFirestore().ClientCheckin.query({\n    where: [\n      { pantryId: [\"==\", p.pantryId] },\n      { checkinDate: [\">\", p.startDateMS] },\n      { checkinDate: [\"<\", p.endDateMS] },\n    ],\n    limit: 400,\n  });\n\n  clientCheckins = _.concat(clientCheckins, r.docs);\n  let nextQuery = r.nextQuery;\n\n  while (nextQuery) {\n    const r2 = await getPantryFirestore().ClientCheckin.query(nextQuery);\n\n    clientCheckins = _.concat(clientCheckins, r2.docs);\n    nextQuery = r2.nextQuery;\n  }\n\n  const uniqueClientsIds = _.uniq(clientCheckins.map((ccin) => ccin.clientId));\n\n  const clients = await getPantryFirestore().Client.getDocs(uniqueClientsIds);\n\n  const clientsMap = clients.reduce((acc, val) => {\n    if (val) {\n      acc[val.id] = val;\n    }\n    return acc;\n  }, {} as Record<string, Client>);\n\n  for (\n    let i = 0;\n    i < _.orderBy(clientCheckins, \"checkinDate\", \"desc\").length;\n    i++\n  ) {\n    const clientCheckIn = clientCheckins[i];\n    const client = clientsMap[clientCheckIn.clientId];\n    if (clientCheckIn && client) {\n      clientCheckinsAndClients.push({\n        client,\n        clientCheckIn,\n      });\n    }\n  }\n\n  return clientCheckinsAndClients;\n}\n","/Users/nathangygi/src/pantry-web/src/models/clientCheckin.schema.ts",[],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":73,"column":10,"nodeType":"199","messageId":"200","endLine":73,"endColumn":21},{"ruleId":"201","severity":1,"message":"202","line":85,"column":6,"nodeType":"203","endLine":85,"endColumn":8,"suggestions":"204"},{"ruleId":"197","severity":1,"message":"205","line":8,"column":18,"nodeType":"199","messageId":"200","endLine":8,"endColumn":28},{"ruleId":"197","severity":1,"message":"205","line":7,"column":18,"nodeType":"199","messageId":"200","endLine":7,"endColumn":28},{"ruleId":"197","severity":1,"message":"206","line":9,"column":10,"nodeType":"199","messageId":"200","endLine":9,"endColumn":16},{"ruleId":"197","severity":1,"message":"207","line":11,"column":10,"nodeType":"199","messageId":"200","endLine":11,"endColumn":20},{"ruleId":"197","severity":1,"message":"208","line":12,"column":10,"nodeType":"199","messageId":"200","endLine":12,"endColumn":26},{"ruleId":"197","severity":1,"message":"209","line":12,"column":28,"nodeType":"199","messageId":"200","endLine":12,"endColumn":32},{"ruleId":"197","severity":1,"message":"210","line":13,"column":8,"nodeType":"199","messageId":"200","endLine":13,"endColumn":11},{"ruleId":"197","severity":1,"message":"211","line":16,"column":10,"nodeType":"199","messageId":"200","endLine":16,"endColumn":24},{"ruleId":"197","severity":1,"message":"212","line":19,"column":18,"nodeType":"199","messageId":"200","endLine":19,"endColumn":27},{"ruleId":"197","severity":1,"message":"213","line":26,"column":10,"nodeType":"199","messageId":"200","endLine":26,"endColumn":31},{"ruleId":"197","severity":1,"message":"214","line":28,"column":10,"nodeType":"199","messageId":"200","endLine":28,"endColumn":23},{"ruleId":"197","severity":1,"message":"215","line":58,"column":24,"nodeType":"199","messageId":"200","endLine":58,"endColumn":39},{"ruleId":"197","severity":1,"message":"216","line":59,"column":26,"nodeType":"199","messageId":"200","endLine":59,"endColumn":43},{"ruleId":"201","severity":1,"message":"217","line":81,"column":6,"nodeType":"203","endLine":81,"endColumn":8,"suggestions":"218"},{"ruleId":"197","severity":1,"message":"219","line":167,"column":25,"nodeType":"199","messageId":"200","endLine":167,"endColumn":34},{"ruleId":"197","severity":1,"message":"220","line":169,"column":25,"nodeType":"199","messageId":"200","endLine":169,"endColumn":32},{"ruleId":"197","severity":1,"message":"221","line":171,"column":25,"nodeType":"199","messageId":"200","endLine":171,"endColumn":35},{"ruleId":"197","severity":1,"message":"222","line":173,"column":25,"nodeType":"199","messageId":"200","endLine":173,"endColumn":33},{"ruleId":"197","severity":1,"message":"223","line":175,"column":25,"nodeType":"199","messageId":"200","endLine":175,"endColumn":35},{"ruleId":"197","severity":1,"message":"224","line":177,"column":25,"nodeType":"199","messageId":"200","endLine":177,"endColumn":39},{"ruleId":"197","severity":1,"message":"225","line":179,"column":25,"nodeType":"199","messageId":"200","endLine":179,"endColumn":33},{"ruleId":"197","severity":1,"message":"226","line":181,"column":25,"nodeType":"199","messageId":"200","endLine":181,"endColumn":33},{"ruleId":"197","severity":1,"message":"227","line":183,"column":25,"nodeType":"199","messageId":"200","endLine":183,"endColumn":36},{"ruleId":"197","severity":1,"message":"228","line":185,"column":25,"nodeType":"199","messageId":"200","endLine":185,"endColumn":33},{"ruleId":"197","severity":1,"message":"229","line":187,"column":25,"nodeType":"199","messageId":"200","endLine":187,"endColumn":42},{"ruleId":"197","severity":1,"message":"230","line":49,"column":10,"nodeType":"199","messageId":"200","endLine":49,"endColumn":28},{"ruleId":"197","severity":1,"message":"231","line":49,"column":30,"nodeType":"199","messageId":"200","endLine":49,"endColumn":51},{"ruleId":"201","severity":1,"message":"232","line":56,"column":6,"nodeType":"203","endLine":56,"endColumn":8,"suggestions":"233"},{"ruleId":"197","severity":1,"message":"198","line":56,"column":10,"nodeType":"199","messageId":"200","endLine":56,"endColumn":21},{"ruleId":"197","severity":1,"message":"234","line":56,"column":23,"nodeType":"199","messageId":"200","endLine":56,"endColumn":37},{"ruleId":"197","severity":1,"message":"198","line":48,"column":10,"nodeType":"199","messageId":"200","endLine":48,"endColumn":21},{"ruleId":"197","severity":1,"message":"216","line":50,"column":26,"nodeType":"199","messageId":"200","endLine":50,"endColumn":43},{"ruleId":"201","severity":1,"message":"202","line":64,"column":6,"nodeType":"203","endLine":64,"endColumn":8,"suggestions":"235"},{"ruleId":"197","severity":1,"message":"236","line":18,"column":3,"nodeType":"199","messageId":"200","endLine":18,"endColumn":23},{"ruleId":"197","severity":1,"message":"216","line":47,"column":26,"nodeType":"199","messageId":"200","endLine":47,"endColumn":43},{"ruleId":"197","severity":1,"message":"237","line":48,"column":9,"nodeType":"199","messageId":"200","endLine":48,"endColumn":16},{"ruleId":"201","severity":1,"message":"217","line":62,"column":6,"nodeType":"203","endLine":62,"endColumn":8,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":242,"column":25,"nodeType":"241","messageId":"242","endLine":242,"endColumn":32},{"ruleId":"197","severity":1,"message":"243","line":2,"column":8,"nodeType":"199","messageId":"200","endLine":2,"endColumn":14},{"ruleId":"197","severity":1,"message":"243","line":2,"column":8,"nodeType":"199","messageId":"200","endLine":2,"endColumn":14},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"@typescript-eslint/no-unused-vars","'globalState' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setGlobalState'. Either include them or remove the dependency array.","ArrayExpression",["246"],"'Typography' is defined but never used.","'Client' is defined but never used.","'useHistory' is defined but never used.","'TouchableOpacity' is defined but never used.","'View' is defined but never used.","'csv' is defined but never used.","'registerClient' is defined but never used.","'TextField' is defined but never used.","'MaterialUiPickersDate' is defined but never used.","'checkInClient' is defined but never used.","'setErrorMessage' is assigned a value but never used.","'setSuccessMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setGlobalState'. Either include it or remove the dependency array.",["247"],"'numAdults' is assigned a value but never used.","'numKids' is assigned a value but never used.","'numSeniors' is assigned a value but never used.","'numMales' is assigned a value but never used.","'numFemales' is assigned a value but never used.","'numOtherGender' is assigned a value but never used.","'numWhite' is assigned a value but never used.","'numBlack' is assigned a value but never used.","'numHispanic' is assigned a value but never used.","'numAsian' is assigned a value but never used.","'numOtherEthnicity' is assigned a value but never used.","'lookupErrorMessage' is assigned a value but never used.","'setLookupErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalState.user' and 'history'. Either include them or remove the dependency array.",["248"],"'setGlobalState' is assigned a value but never used.",["249"],"'registerClientWithId' is defined but never used.","'history' is assigned a value but never used.",["250"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'moment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"251","fix":"257"},{"desc":"253","fix":"258"},"Update the dependencies array to be: [history, setGlobalState]",{"range":"259","text":"260"},"Update the dependencies array to be: [setGlobalState]",{"range":"261","text":"262"},"Update the dependencies array to be: [globalState.user, history]",{"range":"263","text":"264"},{"range":"265","text":"260"},{"range":"266","text":"262"},[3132,3134],"[history, setGlobalState]",[2778,2780],"[setGlobalState]",[2024,2026],"[globalState.user, history]",[1954,1956],[2075,2077]]