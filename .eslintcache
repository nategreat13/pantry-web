[{"/Users/nate/nate/pantry-web/src/index.tsx":"1","/Users/nate/nate/pantry-web/src/reportWebVitals.ts":"2","/Users/nate/nate/pantry-web/src/App.tsx":"3","/Users/nate/nate/pantry-web/src/constants/COLORS.ts":"4","/Users/nate/nate/pantry-web/src/components/StyledText.tsx":"5","/Users/nate/nate/pantry-web/src/components/DOM.tsx":"6","/Users/nate/nate/pantry-web/src/config/firebase.config.ts":"7","/Users/nate/nate/pantry-web/src/firebase.js":"8","/Users/nate/nate/pantry-web/src/screens/Home.tsx":"9","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx":"10","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx":"11","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx":"12","/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts":"13","/Users/nate/nate/pantry-web/src/api/client/registerClient.ts":"14","/Users/nate/nate/pantry-web/src/services/firebase.service.tsx":"15","/Users/nate/nate/pantry-web/src/helpers/FirestoreHelper.tsx":"16","/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts":"17","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx":"18","/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts":"19","/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts":"20","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx":"21","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx":"22","/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx":"23","/Users/nate/nate/pantry-web/src/global/globalState.tsx":"24","/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts":"25","/Users/nate/nate/pantry-web/src/components/Header.tsx":"26","/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx":"27","/Users/nate/nate/pantry-web/src/api/clientCheckIn/checkInClient.ts":"28","/Users/nate/nate/pantry-web/src/api/clientCheckIn/addCheckIn.ts":"29","/Users/nate/nate/pantry-web/src/screens/ClientLookup/ClientLookup.tsx":"30","/Users/nate/nate/pantry-web/src/api/client/lookupClient.ts":"31","/Users/nate/nate/pantry-web/src/screens/PantryLookup/PantryLookup.tsx":"32","/Users/nate/nate/pantry-web/src/api/pantry/lookupPantry.ts":"33"},{"size":500,"mtime":1606959212220,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1606959212221,"results":"36","hashOfConfig":"35"},{"size":2848,"mtime":1610505464053,"results":"37","hashOfConfig":"35"},{"size":438,"mtime":1607054762728,"results":"38","hashOfConfig":"35"},{"size":1040,"mtime":1606966881447,"results":"39","hashOfConfig":"35"},{"size":1529,"mtime":1606966879929,"results":"40","hashOfConfig":"35"},{"size":332,"mtime":1606968241716,"results":"41","hashOfConfig":"35"},{"size":373,"mtime":1609294399085,"results":"42","hashOfConfig":"35"},{"size":4205,"mtime":1610511039667,"results":"43","hashOfConfig":"35"},{"size":8290,"mtime":1610593958193,"results":"44","hashOfConfig":"35"},{"size":15842,"mtime":1610594194016,"results":"45","hashOfConfig":"35"},{"size":1300,"mtime":1610505334887,"results":"46","hashOfConfig":"35"},{"size":2985,"mtime":1608354771033,"results":"47","hashOfConfig":"35"},{"size":640,"mtime":1610593691467,"results":"48","hashOfConfig":"35"},{"size":840,"mtime":1609294939534,"results":"49","hashOfConfig":"35"},{"size":1774,"mtime":1610591608265,"results":"50","hashOfConfig":"35"},{"size":494,"mtime":1609446247279,"results":"51","hashOfConfig":"35"},{"size":1262,"mtime":1609448013289,"results":"52","hashOfConfig":"35"},{"size":750,"mtime":1610510930883,"results":"53","hashOfConfig":"35"},{"size":496,"mtime":1609446240024,"results":"54","hashOfConfig":"35"},{"size":8525,"mtime":1610512009140,"results":"55","hashOfConfig":"35"},{"size":1154,"mtime":1609381388414,"results":"56","hashOfConfig":"35"},{"size":6871,"mtime":1610512025408,"results":"57","hashOfConfig":"35"},{"size":891,"mtime":1609449028486,"results":"58","hashOfConfig":"35"},{"size":209,"mtime":1610428299148,"results":"59","hashOfConfig":"35"},{"size":3068,"mtime":1609450166146,"results":"60","hashOfConfig":"35"},{"size":4150,"mtime":1610512269700,"results":"61","hashOfConfig":"35"},{"size":605,"mtime":1610505473297,"results":"62","hashOfConfig":"35"},{"size":529,"mtime":1609707751618,"results":"63","hashOfConfig":"35"},{"size":6657,"mtime":1610512221394,"results":"64","hashOfConfig":"35"},{"size":769,"mtime":1610594290652,"results":"65","hashOfConfig":"35"},{"size":5652,"mtime":1610512102373,"results":"66","hashOfConfig":"35"},{"size":831,"mtime":1610505506266,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1uv1hoe",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/nate/nate/pantry-web/src/index.tsx",[],["138","139"],"/Users/nate/nate/pantry-web/src/reportWebVitals.ts",[],"/Users/nate/nate/pantry-web/src/App.tsx",["140"],"import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { GlobalContextProvider } from \"./global/globalState\";\nimport { ClientCheckin } from \"./screens/ClientCheckin/ClientCheckin\";\nimport { ClientLookup } from \"./screens/ClientLookup/ClientLookup\";\nimport { ClientRegistrationHouseholdInfo } from \"./screens/ClientRegistration/ClienRegistrationHouseholdInfo\";\nimport { ClientRegistration } from \"./screens/ClientRegistration/ClientRegistration\";\nimport { ClientRegistrationProvider } from \"./screens/ClientRegistration/ClientRegistrationState\";\nimport { ClientRegistrationSuccess } from \"./screens/ClientRegistration/ClientRegistrationSuccess\";\nimport { Home } from \"./screens/Home\";\nimport { PantryLogin } from \"./screens/PantryLogin/PantryLogin\";\nimport { PantryLookup } from \"./screens/PantryLookup/PantryLookup\";\nimport { PantryRegistration } from \"./screens/PantryRegistration/PantryRegistration\";\nimport { PantryRegistrationSuccess } from \"./screens/PantryRegistration/PantryRegistrationSuccess\";\nimport { initFirebase } from \"./services/firebase.service\";\n\nexport default function App() {\n  initFirebase();\n  return (\n    <GlobalContextProvider>\n      <Router>\n        <Header />\n        <div>\n          <Switch>\n            <Route exact path=\"/client/checkin\">\n              <ClientCheckin />\n            </Route>\n            <Route exact path=\"/client/lookup\">\n              <ClientLookup />\n            </Route>\n            <Route exact path=\"/pantry/lookup\">\n              <PantryLookup />\n            </Route>\n            <Route exact path=\"/\">\n              <BaseRoute />\n            </Route>\n            <Route exact path=\"/home\">\n              <Home />\n            </Route>\n            <Route exact path=\"/pantry/register\">\n              <PantryRegistration />\n            </Route>\n            <Route exact path=\"/pantry/register/success/:pantryId\">\n              <PantryRegistrationSuccess />\n            </Route>\n            <Route exact path=\"/pantry/login\">\n              <PantryLogin />\n            </Route>\n            <ClientRegistrationProvider>\n              <Route exact path=\"/client/register\">\n                <ClientRegistration />\n              </Route>\n              <Route exact path=\"/client/register/householdInfo\">\n                <ClientRegistrationHouseholdInfo />\n              </Route>\n              <Route exact path=\"/client/register/success\">\n                <ClientRegistrationSuccess />\n              </Route>\n            </ClientRegistrationProvider>\n          </Switch>\n        </div>\n      </Router>\n    </GlobalContextProvider>\n  );\n}\n\nfunction BaseRoute() {\n  const history = useHistory();\n  useEffect(() => {\n    history.push(\"/home\");\n  }, []);\n  return null;\n}\n","/Users/nate/nate/pantry-web/src/constants/COLORS.ts",[],"/Users/nate/nate/pantry-web/src/components/StyledText.tsx",[],"/Users/nate/nate/pantry-web/src/components/DOM.tsx",[],"/Users/nate/nate/pantry-web/src/config/firebase.config.ts",[],"/Users/nate/nate/pantry-web/src/firebase.js",[],"/Users/nate/nate/pantry-web/src/screens/Home.tsx",["141"],"import {\n  Button,\n  Container,\n  Grid,\n  makeStyles,\n  Theme,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { COLORS } from \"../constants/COLORS\";\nimport { useGlobalContext } from \"../global/globalState\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}));\n\nexport function Home() {\n  const theme = useTheme<Theme>();\n  const classes = useStyles();\n  const mobileDevice = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  let history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      {/* <CssBaseline /> */}\n      <div className={classes.paper}>\n        <Grid container spacing={2}>\n          {!globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                  marginRight: mobileDevice ? 0 : 16,\n\n                  width: \"100%\",\n                }}\n                onClick={() => {\n                  history.push(\"/pantry/register\");\n                }}\n              >\n                Pantry Registration\n              </Button>\n            </Grid>\n          ) : null}\n          <Grid item xs={12}>\n            <Button\n              style={{\n                backgroundColor: COLORS.primary,\n                color: COLORS.buttonTextColor,\n\n                width: \"100%\",\n              }}\n              onClick={() => {\n                history.push(\"/pantry/lookup\");\n              }}\n            >\n              Pantry Lookup\n            </Button>\n          </Grid>\n          {!globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                  marginRight: mobileDevice ? 0 : 16,\n\n                  width: \"100%\",\n                }}\n                onClick={() => {\n                  history.push(\"/pantry/login\");\n                }}\n              >\n                Pantry Login\n              </Button>\n            </Grid>\n          ) : null}\n          {/* {!globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                  marginRight: mobileDevice ? 0 : 16,\n\n                  width: \"100%\",\n                }}\n              >\n                Pantry Admin Login\n              </Button>\n            </Grid>\n          ) : null} */}\n\n          <Grid item xs={12}>\n            <Button\n              style={{\n                backgroundColor: COLORS.primary,\n                color: COLORS.buttonTextColor,\n\n                width: \"100%\",\n              }}\n              onClick={() => {\n                history.push(\"/client/register\");\n              }}\n            >\n              Client Registration\n            </Button>\n          </Grid>\n          {globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n\n                  width: \"100%\",\n                }}\n                onClick={() => {\n                  history.push(\"/client/checkin\");\n                }}\n              >\n                Client Check-in\n              </Button>\n            </Grid>\n          ) : null}\n          {globalState.user ? (\n            <Grid item xs={12}>\n              <Button\n                style={{\n                  backgroundColor: COLORS.primary,\n                  color: COLORS.buttonTextColor,\n\n                  width: \"100%\",\n                }}\n                onClick={() => {\n                  history.push(\"/client/lookup\");\n                }}\n              >\n                Client Lookup\n              </Button>\n            </Grid>\n          ) : null}\n        </Grid>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx",[],"/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts",[],"/Users/nate/nate/pantry-web/src/api/client/registerClient.ts",[],"/Users/nate/nate/pantry-web/src/services/firebase.service.tsx",[],"/Users/nate/nate/pantry-web/src/helpers/FirestoreHelper.tsx",[],"/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts",[],"/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx",[],"/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx",["142","143"],"import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { getPantry } from \"../../api/pantry/getPantry\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function PantryLogin() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Pantry Login</Typography>\n        <Formik\n          initialValues={{\n            pantryId: \"\",\n            password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          onSubmit={async (values) => {\n            const pantry = await getPantry({ id: `${values.pantryId}` });\n            if (!pantry) {\n              setErrorMessage(\"Invalid Pantry ID\");\n              return;\n            }\n            if (pantry.password !== values.password) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            setGlobalState({\n              user: {\n                firstName: values.firstName,\n                lastName: values.lastName,\n                email: values.email,\n                pantry,\n              },\n            });\n            history.goBack();\n          }}\n          validationSchema={Yup.object().shape({\n            pantryId: Yup.number().required(),\n            password: Yup.string().required(),\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required(),\n          })}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            isValid,\n          }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"pantryId\"\n                    label=\"Pantry ID\"\n                    name=\"pantryId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.pantryId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Password\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"password\"\n                    value={values.password}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    value={values.firstName}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    fullWidth\n                    required\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    required\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email Address\"\n                    fullWidth\n                    type=\"email\"\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor:\n                    !isValid || !values.pantryId\n                      ? COLORS.surface\n                      : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!isValid || !values.pantryId}\n              >\n                Login\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/global/globalState.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts",[],"/Users/nate/nate/pantry-web/src/components/Header.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx",[],"/Users/nate/nate/pantry-web/src/api/clientCheckIn/checkInClient.ts",[],"/Users/nate/nate/pantry-web/src/api/clientCheckIn/addCheckIn.ts",[],"/Users/nate/nate/pantry-web/src/screens/ClientLookup/ClientLookup.tsx",[],"/Users/nate/nate/pantry-web/src/api/client/lookupClient.ts",[],"/Users/nate/nate/pantry-web/src/screens/PantryLookup/PantryLookup.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/lookupPantry.ts",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":77,"column":6,"nodeType":"150","endLine":77,"endColumn":8,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":29,"column":23,"nodeType":"154","messageId":"155","endLine":29,"endColumn":37},{"ruleId":"152","severity":1,"message":"156","line":42,"column":10,"nodeType":"154","messageId":"155","endLine":42,"endColumn":21},{"ruleId":"152","severity":1,"message":"157","line":44,"column":26,"nodeType":"154","messageId":"155","endLine":44,"endColumn":43},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["160"],"@typescript-eslint/no-unused-vars","'setGlobalState' is assigned a value but never used.","Identifier","unusedVar","'globalState' is assigned a value but never used.","'setSuccessMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},"Update the dependencies array to be: [history]",{"range":"163","text":"164"},[2826,2828],"[history]"]