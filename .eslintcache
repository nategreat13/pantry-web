[{"/Users/nate/nate/pantry-web/src/index.tsx":"1","/Users/nate/nate/pantry-web/src/reportWebVitals.ts":"2","/Users/nate/nate/pantry-web/src/App.tsx":"3","/Users/nate/nate/pantry-web/src/constants/COLORS.ts":"4","/Users/nate/nate/pantry-web/src/components/StyledText.tsx":"5","/Users/nate/nate/pantry-web/src/components/DOM.tsx":"6","/Users/nate/nate/pantry-web/src/config/firebase.config.ts":"7","/Users/nate/nate/pantry-web/src/firebase.js":"8","/Users/nate/nate/pantry-web/src/screens/Home.tsx":"9","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx":"10","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx":"11","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx":"12","/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts":"13","/Users/nate/nate/pantry-web/src/api/client/registerClient.ts":"14","/Users/nate/nate/pantry-web/src/services/firebase.service.tsx":"15","/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts":"16","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx":"17","/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts":"18","/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts":"19","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx":"20","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx":"21","/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx":"22","/Users/nate/nate/pantry-web/src/global/globalState.tsx":"23","/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts":"24","/Users/nate/nate/pantry-web/src/components/Header.tsx":"25","/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx":"26","/Users/nate/nate/pantry-web/src/api/clientCheckIn/checkInClient.ts":"27","/Users/nate/nate/pantry-web/src/api/clientCheckIn/addCheckIn.ts":"28","/Users/nate/nate/pantry-web/src/screens/ClientLookup/ClientLookup.tsx":"29","/Users/nate/nate/pantry-web/src/api/client/lookupClient.ts":"30","/Users/nate/nate/pantry-web/src/screens/PantryLookup/PantryLookup.tsx":"31","/Users/nate/nate/pantry-web/src/api/pantry/lookupPantry.ts":"32","/Users/nate/nate/pantry-web/src/api/client/getClient.ts":"33","/Users/nate/nate/pantry-web/src/screens/ClientUpload/ClientUpload.tsx":"34","/Users/nate/nate/pantry-web/src/models/client.schema.ts":"35"},{"size":500,"mtime":1606959212220,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":1606959212221,"results":"38","hashOfConfig":"37"},{"size":3276,"mtime":1614143573752,"results":"39","hashOfConfig":"37"},{"size":438,"mtime":1614384564046,"results":"40","hashOfConfig":"37"},{"size":1040,"mtime":1606966881447,"results":"41","hashOfConfig":"37"},{"size":1529,"mtime":1606966879929,"results":"42","hashOfConfig":"37"},{"size":332,"mtime":1606968241716,"results":"43","hashOfConfig":"37"},{"size":373,"mtime":1609294399085,"results":"44","hashOfConfig":"37"},{"size":4159,"mtime":1612840362497,"results":"45","hashOfConfig":"37"},{"size":8275,"mtime":1614302928657,"results":"46","hashOfConfig":"37"},{"size":15879,"mtime":1614135820091,"results":"47","hashOfConfig":"37"},{"size":1298,"mtime":1614302937773,"results":"48","hashOfConfig":"37"},{"size":2985,"mtime":1608354771033,"results":"49","hashOfConfig":"37"},{"size":722,"mtime":1614136003535,"results":"50","hashOfConfig":"37"},{"size":976,"mtime":1613106448574,"results":"51","hashOfConfig":"37"},{"size":493,"mtime":1613106279894,"results":"52","hashOfConfig":"37"},{"size":2213,"mtime":1613100397765,"results":"53","hashOfConfig":"37"},{"size":749,"mtime":1613106348808,"results":"54","hashOfConfig":"37"},{"size":495,"mtime":1613106290430,"results":"55","hashOfConfig":"37"},{"size":8511,"mtime":1614303015879,"results":"56","hashOfConfig":"37"},{"size":1874,"mtime":1612841994702,"results":"57","hashOfConfig":"37"},{"size":9848,"mtime":1613102582782,"results":"58","hashOfConfig":"37"},{"size":913,"mtime":1612840435282,"results":"59","hashOfConfig":"37"},{"size":209,"mtime":1613106224388,"results":"60","hashOfConfig":"37"},{"size":3412,"mtime":1613100720461,"results":"61","hashOfConfig":"37"},{"size":6378,"mtime":1614384159932,"results":"62","hashOfConfig":"37"},{"size":605,"mtime":1613106224388,"results":"63","hashOfConfig":"37"},{"size":528,"mtime":1613106361722,"results":"64","hashOfConfig":"37"},{"size":7099,"mtime":1613100219975,"results":"65","hashOfConfig":"37"},{"size":751,"mtime":1613106317601,"results":"66","hashOfConfig":"37"},{"size":6083,"mtime":1614392884019,"results":"67","hashOfConfig":"37"},{"size":813,"mtime":1613106385368,"results":"68","hashOfConfig":"37"},{"size":294,"mtime":1613103423521,"results":"69","hashOfConfig":"37"},{"size":11768,"mtime":1614385339277,"results":"70","hashOfConfig":"37"},{"size":1244,"mtime":1614322079606,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1uv1hoe",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/nate/nate/pantry-web/src/index.tsx",[],["150","151"],"/Users/nate/nate/pantry-web/src/reportWebVitals.ts",[],"/Users/nate/nate/pantry-web/src/App.tsx",["152","153"],"import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { GlobalContextProvider, useGlobalContext } from \"./global/globalState\";\nimport { ClientCheckin } from \"./screens/ClientCheckin/ClientCheckin\";\nimport { ClientLookup } from \"./screens/ClientLookup/ClientLookup\";\nimport { ClientRegistrationHouseholdInfo } from \"./screens/ClientRegistration/ClienRegistrationHouseholdInfo\";\nimport { ClientRegistration } from \"./screens/ClientRegistration/ClientRegistration\";\nimport { ClientRegistrationProvider } from \"./screens/ClientRegistration/ClientRegistrationState\";\nimport { ClientRegistrationSuccess } from \"./screens/ClientRegistration/ClientRegistrationSuccess\";\nimport { ClientUpload } from \"./screens/ClientUpload/ClientUpload\";\nimport { Home } from \"./screens/Home\";\nimport { PantryLogin } from \"./screens/PantryLogin/PantryLogin\";\nimport { PantryLookup } from \"./screens/PantryLookup/PantryLookup\";\nimport { PantryRegistration } from \"./screens/PantryRegistration/PantryRegistration\";\nimport { PantryRegistrationSuccess } from \"./screens/PantryRegistration/PantryRegistrationSuccess\";\n\nexport default function App() {\n  return (\n    <GlobalContextProvider>\n      <Router>\n        <Header />\n        <div>\n          <Switch>\n            <Route exact path=\"/client/checkin\">\n              <ClientCheckin />\n            </Route>\n            <Route exact path=\"/client/lookup\">\n              <ClientLookup />\n            </Route>\n            <Route exact path=\"/pantry/lookup\">\n              <PantryLookup />\n            </Route>\n            <Route exact path=\"/\">\n              <BaseRoute />\n            </Route>\n            <Route exact path=\"/home\">\n              <Home />\n            </Route>\n            <Route exact path=\"/pantry/register\">\n              <PantryRegistration />\n            </Route>\n            <Route exact path=\"/pantry/register/success/:pantryId\">\n              <PantryRegistrationSuccess />\n            </Route>\n            <Route exact path=\"/pantry/login\">\n              <PantryLogin />\n            </Route>\n            <ClientRegistrationProvider>\n              <Route exact path=\"/client/register\">\n                <ClientRegistration />\n              </Route>\n              <Route exact path=\"/client/register/householdInfo\">\n                <ClientRegistrationHouseholdInfo />\n              </Route>\n              <Route exact path=\"/client/register/success\">\n                <ClientRegistrationSuccess />\n              </Route>\n              <Route exact path=\"/client/upload\">\n                <ClientUpload />\n              </Route>\n            </ClientRegistrationProvider>\n          </Switch>\n        </div>\n      </Router>\n    </GlobalContextProvider>\n  );\n}\n\nfunction BaseRoute() {\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    } else {\n      history.push(\"/pantry/login\");\n    }\n  }, []);\n  return null;\n}\n","/Users/nate/nate/pantry-web/src/constants/COLORS.ts",[],"/Users/nate/nate/pantry-web/src/components/StyledText.tsx",[],"/Users/nate/nate/pantry-web/src/components/DOM.tsx",[],"/Users/nate/nate/pantry-web/src/config/firebase.config.ts",[],["154","155"],"/Users/nate/nate/pantry-web/src/firebase.js",[],"/Users/nate/nate/pantry-web/src/screens/Home.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx",[],"/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts",[],"/Users/nate/nate/pantry-web/src/api/client/registerClient.ts",[],"/Users/nate/nate/pantry-web/src/services/firebase.service.tsx",[],"/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx",["156"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useClientRegistrationContext } from \"./ClientRegistrationState\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n}));\n\nexport function ClientRegistrationSuccess() {\n  const classes = useStyles();\n  const [clientRegistrationState] = useClientRegistrationContext();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>The Client ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {clientRegistrationState.id}\n        </StyledText>\n        <StyledText>\n          Give this ID to the client and tell them to remember it.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n        {/* <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <Typography>Success!</Typography>\n        <Typography>Your Client ID is:</Typography>\n        <Typography>{clientRegistrationState.id}</Typography> */}\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts",[],"/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx",["157"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { COLORS } from \"../../constants/COLORS\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport function PantryRegistrationSuccess() {\n  const classes = useStyles();\n  const { pantryId } = useParams<any>();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>Your Pantry ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {pantryId}\n        </StyledText>\n        <StyledText>\n          Keep track of this ID, the password, and the admin password.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx",["158","159","160"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { getPantry } from \"../../api/pantry/getPantry\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function PantryLogin() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [selectedRadioButton, setSelectedRadioButton] = useState<\n    \"volunteer\" | \"admin\"\n  >(\"volunteer\");\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Login</Typography>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            row\n            aria-label=\"position\"\n            name=\"position\"\n            style={{ marginTop: 8 }}\n            value={selectedRadioButton}\n            onChange={(event) => {\n              if (\n                event.target.value === \"volunteer\" ||\n                event.target.value === \"admin\"\n              ) {\n                setSelectedRadioButton(event.target.value);\n              }\n            }}\n          >\n            <FormControlLabel\n              value=\"volunteer\"\n              control={<Radio color=\"primary\" />}\n              label=\"Volunteer\"\n            />\n            <FormControlLabel\n              value=\"admin\"\n              control={<Radio color=\"primary\" />}\n              label=\"Admin\"\n            />\n          </RadioGroup>\n        </FormControl>\n        <Formik\n          initialValues={{\n            pantryId: \"\",\n            password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          onSubmit={async (values) => {\n            const pantry = await getPantry({ id: `${values.pantryId}` });\n            if (!pantry) {\n              setErrorMessage(\"Invalid Pantry ID\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"volunteer\" &&\n              pantry.password !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"admin\" &&\n              pantry.adminPassword !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            const user = {\n              firstName: values.firstName,\n              lastName: values.lastName,\n              email: values.email,\n              pantry,\n              isAdmin: selectedRadioButton === \"admin\",\n            };\n            setGlobalState({\n              user,\n            });\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            history.push(\"/client/checkin\");\n          }}\n          validationSchema={Yup.object().shape({\n            pantryId: Yup.number().required(),\n            password: Yup.string().required(),\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required(),\n          })}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            isValid,\n          }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"pantryId\"\n                    label=\"Pantry ID\"\n                    name=\"pantryId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.pantryId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"password\"\n                    name=\"password\"\n                    label={\n                      selectedRadioButton === \"volunteer\"\n                        ? \"Password\"\n                        : \"Admin Password\"\n                    }\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"password\"\n                    value={values.password}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    value={values.firstName}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    fullWidth\n                    required\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    required\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email Address\"\n                    fullWidth\n                    type=\"email\"\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor:\n                    !isValid || !values.pantryId\n                      ? COLORS.surface\n                      : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!isValid || !values.pantryId}\n              >\n                Login\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New? Register your pantry to get started.\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/register\");\n          }}\n        >\n          Register Your Pantry\n        </Button>\n        <StyledText\n          style={{ color: COLORS.primary, marginTop: 16, marginBottom: 8 }}\n        >\n          Forgot your Pantry ID?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/lookup\");\n          }}\n        >\n          Lookup Pantry ID\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/global/globalState.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts",[],"/Users/nate/nate/pantry-web/src/components/Header.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx",["161"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CheckinIcon from \"@material-ui/icons/Room\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { checkInClient } from \"../../api/clientCheckIn/checkInClient\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity } from \"react-native-web\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function ClientCheckin() {\n  const classes = useStyles();\n  const [globalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const history = useHistory();\n  const [showUploadButton, setShowUploadButton] = useState(false);\n\n  useEffect(() => {\n    if (!globalState.user) {\n      history.replace(\"/pantry/login\");\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <TouchableOpacity\n          onLongPress={() => {\n            setShowUploadButton(true);\n          }}\n        >\n          <Avatar className={classes.avatar}>\n            <CheckinIcon />\n          </Avatar>\n        </TouchableOpacity>\n        <Typography variant=\"h5\">Client Check-in</Typography>\n        <Formik\n          initialValues={{\n            clientId: \"\",\n          }}\n          onSubmit={async (values, { resetForm }) => {\n            setErrorMessage(\"\");\n            setSuccessMessage(\"\");\n            if (globalState.user) {\n              const checkin = await checkInClient({\n                clientId: `${values.clientId}`,\n                pantry: globalState.user.pantry,\n              });\n\n              if (checkin === null) {\n                setErrorMessage(\"Client not found. Please check the Client ID\");\n              } else {\n                setSuccessMessage(\n                  `Successful Check-in:\\nClient Name: ${\n                    checkin.client.firstName\n                  } ${checkin.client.lastName}\\n# of People in household: ${\n                    checkin.client.householdInfo.numAdults +\n                    checkin.client.householdInfo.numKids +\n                    checkin.client.householdInfo.numSeniors\n                  }`\n                );\n                resetForm();\n              }\n            }\n          }}\n        >\n          {({ handleBlur, handleChange, handleSubmit, values }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"clientId\"\n                    label=\"Client ID\"\n                    name=\"clientId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.clientId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor: !values.clientId\n                    ? COLORS.surface\n                    : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!values.clientId}\n              >\n                Check In Client\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New Client?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/client/register\");\n          }}\n        >\n          Register Client\n        </Button>\n        <StyledText\n          style={{ color: COLORS.primary, marginTop: 16, marginBottom: 8 }}\n        >\n          Forgot your Pantry ID?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/client/lookup\");\n          }}\n        >\n          Lookup Client ID\n        </Button>\n        {showUploadButton ? (\n          <Button\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: COLORS.primary,\n              color: COLORS.buttonTextColor,\n              marginTop: 16,\n            }}\n            onClick={() => {\n              history.push(\"/client/upload\");\n            }}\n          >\n            Upload Existing Clients\n          </Button>\n        ) : null}\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/api/clientCheckIn/checkInClient.ts",[],"/Users/nate/nate/pantry-web/src/api/clientCheckIn/addCheckIn.ts",[],"/Users/nate/nate/pantry-web/src/screens/ClientLookup/ClientLookup.tsx",[],"/Users/nate/nate/pantry-web/src/api/client/lookupClient.ts",[],"/Users/nate/nate/pantry-web/src/screens/PantryLookup/PantryLookup.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/lookupPantry.ts",[],"/Users/nate/nate/pantry-web/src/api/client/getClient.ts",["162","163"],"/Users/nate/nate/pantry-web/src/screens/ClientUpload/ClientUpload.tsx",["164","165","166","167","168"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport UploadIcon from \"@material-ui/icons/CloudUpload\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { Client, ClientKeys } from \"../../models/client.schema\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity, View } from \"react-native-web\";\nimport csv from \"csvtojson\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { registerClient } from \"../../api/client/registerClient\";\nimport { CSVLink } from \"react-csv\";\nimport moment from \"moment\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function ClientUpload() {\n  const classes = useStyles();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [csvData, setCSVData] = useState<any[]>([]);\n  const [numUploaded, setNumUploaded] = useState(0);\n  const [totalNumUploading, setTotalNumUploading] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n      }\n    }\n  }, []);\n\n  function convertStringToEachFirstLetterCapitalized(val: string) {\n    return val\n      .split(\" \")\n      .map((a) => _.upperFirst(a.toLowerCase()))\n      .join(\" \");\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <UploadIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Upload Client List</Typography>\n        <View style={{ width: \"100%\" }}>\n          <StyledText style={{ marginTop: 4 }}>\n            {`* Must be a .csv file`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4 }}>{`* Fields:`}</StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* firstName (required)`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* lastName (required)`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* address`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* address2`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* city`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* state`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* zip`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* phoneNumber`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numAdults`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numKids`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numSeniors`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numMales`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numFemales`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numOtherGender`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numWhite`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numBlack`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numAsian`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numHispanic`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numOtherEthnicity`}\n          </StyledText>\n        </View>\n        <input\n          id=\"logo-upload-button\"\n          multiple={false}\n          accept=\".csv\"\n          onChange={async (event) => {\n            var file = event.target.files?.[0];\n            if (file) {\n              setIsUploading(true);\n              const csvText = await file.text();\n\n              csv({})\n                .fromString(csvText)\n                .then(async (data) => {\n                  if (!data.length) {\n                    setIsUploading(false);\n                    return;\n                  }\n                  const keys = Object.keys(data[0]);\n                  const missingFields: string[] = [];\n                  [\"firstName\", \"lastName\", \"address\"].forEach((key) => {\n                    if (!keys.includes(key)) {\n                      missingFields.push(key);\n                    }\n                  });\n\n                  if (missingFields.length) {\n                    setErrorMessage(\n                      `Missing Fields: ${missingFields.join(\", \")}`\n                    );\n                    setIsUploading(false);\n                    return;\n                  }\n\n                  const clientsToAdd: Omit<\n                    Client,\n                    \"id\" | \"registrationDate\"\n                  >[] = _.compact(\n                    data.map((clientData) => {\n                      if (!clientData.firstName || !clientData.lastName) {\n                        return;\n                      }\n                      return {\n                        firstName: convertStringToEachFirstLetterCapitalized(\n                          clientData.firstName\n                        ),\n                        lastName: convertStringToEachFirstLetterCapitalized(\n                          clientData.lastName\n                        ),\n                        address: convertStringToEachFirstLetterCapitalized(\n                          clientData.address ?? \"\"\n                        ),\n                        address2: convertStringToEachFirstLetterCapitalized(\n                          clientData.address2 ?? \"\"\n                        ),\n                        city: convertStringToEachFirstLetterCapitalized(\n                          clientData.city ?? \"\"\n                        ),\n                        phoneNumber: convertStringToEachFirstLetterCapitalized(\n                          clientData.phoneNumber ?? \"\"\n                        ),\n                        state: convertStringToEachFirstLetterCapitalized(\n                          clientData.state ?? \"\"\n                        ),\n                        zip: convertStringToEachFirstLetterCapitalized(\n                          clientData.zip ?? \"\"\n                        ),\n                        householdInfo: {\n                          numAdults: parseInt(clientData.numAdults),\n                          numKids: parseInt(clientData.numKids),\n                          numSeniors: parseInt(clientData.numSeniors),\n                          numMales: parseInt(clientData.numMales),\n                          numFemales: parseInt(clientData.numFemales),\n                          numOtherGender: parseInt(clientData.numOtherGender),\n                          numWhite: parseInt(clientData.numWhite),\n                          numBlack: parseInt(clientData.numBlack),\n                          numAsian: parseInt(clientData.numAsian),\n                          numHispanic: parseInt(clientData.numHispanic),\n                          numOtherEthnicity: parseInt(\n                            clientData.numOtherEthnicity\n                          ),\n                        },\n                      };\n                    })\n                  );\n\n                  setTotalNumUploading(clientsToAdd.length);\n\n                  let numberUploaded = 0;\n\n                  try {\n                    const addedClients = _.compact(\n                      await Promise.all(\n                        clientsToAdd.map(async (clientToAdd) => {\n                          const newClient = await registerClient({\n                            client: clientToAdd,\n                          });\n                          numberUploaded++;\n                          setNumUploaded(numberUploaded);\n                          return newClient;\n                        })\n                      )\n                    );\n\n                    if (addedClients.length) {\n                      const data = addedClients.map((client) => {\n                        const clientData: any = _.merge(\n                          client,\n                          client.householdInfo\n                        );\n                        delete clientData.householdInfo;\n                        clientData.registrationDate = moment(\n                          clientData.registrationDate\n                        ).format(\"MM-DD-YYYY\");\n                        return clientData;\n                      });\n                      setCSVData(data);\n                    }\n                  } catch (e) {}\n                  setIsUploading(false);\n                });\n            }\n          }}\n          type=\"file\"\n          style={{ display: \"none\" }}\n        />\n        <label htmlFor=\"logo-upload-button\">\n          <TouchableOpacity\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              padding: 15,\n              backgroundColor: COLORS.primary,\n              marginTop: 32,\n              borderRadius: 8,\n              marginBottom: 16,\n            }}\n            onPress={() => {\n              setErrorMessage(\"\");\n            }}\n          >\n            <StyledText style={{ color: COLORS.onPrimary }}>\n              Choose File\n            </StyledText>\n          </TouchableOpacity>\n        </label>\n        {isUploading ? (\n          <>\n            <CircularProgress\n              size={14}\n              style={{ marginLeft: 12, color: COLORS.primary }}\n            />\n          </>\n        ) : null}\n        {totalNumUploading && numUploaded ? (\n          <StyledText>{`${numUploaded} of ${totalNumUploading} uploaded`}</StyledText>\n        ) : null}\n        {csvData.length ? (\n          <CSVLink\n            data={csvData}\n            headers={ClientKeys.map((key) => ({ key, label: key }))}\n            filename={\"client_upload_results.csv\"}\n          >\n            {`Download Result File`}\n          </CSVLink>\n        ) : null}\n        {errorMessage ? (\n          <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n            {errorMessage}\n          </StyledText>\n        ) : null}\n        {successMessage ? (\n          <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n            {successMessage}\n          </StyledText>\n        ) : null}\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/models/client.schema.ts",[],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":77,"column":10,"nodeType":"175","messageId":"176","endLine":77,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":89,"column":6,"nodeType":"179","endLine":89,"endColumn":8,"suggestions":"180"},{"ruleId":"169","replacedBy":"181"},{"ruleId":"171","replacedBy":"182"},{"ruleId":"173","severity":1,"message":"183","line":8,"column":18,"nodeType":"175","messageId":"176","endLine":8,"endColumn":28},{"ruleId":"173","severity":1,"message":"183","line":7,"column":18,"nodeType":"175","messageId":"176","endLine":7,"endColumn":28},{"ruleId":"173","severity":1,"message":"174","line":48,"column":10,"nodeType":"175","messageId":"176","endLine":48,"endColumn":21},{"ruleId":"173","severity":1,"message":"184","line":50,"column":26,"nodeType":"175","messageId":"176","endLine":50,"endColumn":43},{"ruleId":"177","severity":1,"message":"178","line":64,"column":6,"nodeType":"179","endLine":64,"endColumn":8,"suggestions":"185"},{"ruleId":"177","severity":1,"message":"186","line":51,"column":6,"nodeType":"179","endLine":51,"endColumn":8,"suggestions":"187"},{"ruleId":"173","severity":1,"message":"188","line":1,"column":10,"nodeType":"175","messageId":"176","endLine":1,"endColumn":23},{"ruleId":"173","severity":1,"message":"189","line":2,"column":10,"nodeType":"175","messageId":"176","endLine":2,"endColumn":16},{"ruleId":"173","severity":1,"message":"184","line":44,"column":26,"nodeType":"175","messageId":"176","endLine":44,"endColumn":43},{"ruleId":"173","severity":1,"message":"190","line":45,"column":9,"nodeType":"175","messageId":"176","endLine":45,"endColumn":16},{"ruleId":"173","severity":1,"message":"174","line":46,"column":10,"nodeType":"175","messageId":"176","endLine":46,"endColumn":21},{"ruleId":"177","severity":1,"message":"191","line":59,"column":6,"nodeType":"179","endLine":59,"endColumn":8,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":178,"column":25,"nodeType":"195","messageId":"196","endLine":178,"endColumn":32},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"@typescript-eslint/no-unused-vars","'globalState' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setGlobalState'. Either include them or remove the dependency array.","ArrayExpression",["199"],["197"],["198"],"'Typography' is defined but never used.","'setSuccessMessage' is assigned a value but never used.",["200"],"React Hook useEffect has missing dependencies: 'globalState.user' and 'history'. Either include them or remove the dependency array.",["201"],"'OptionalQuery' is defined but never used.","'Client' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setGlobalState'. Either include it or remove the dependency array.",["202"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"203","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [history, setGlobalState]",{"range":"210","text":"211"},{"range":"212","text":"211"},"Update the dependencies array to be: [globalState.user, history]",{"range":"213","text":"214"},"Update the dependencies array to be: [setGlobalState]",{"range":"215","text":"216"},[3254,3256],"[history, setGlobalState]",[1954,1956],[1689,1691],"[globalState.user, history]",[2048,2050],"[setGlobalState]"]