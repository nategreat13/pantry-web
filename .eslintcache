[{"/Users/nathangygi/src/pantry-web/src/index.tsx":"1","/Users/nathangygi/src/pantry-web/src/reportWebVitals.ts":"2","/Users/nathangygi/src/pantry-web/src/App.tsx":"3","/Users/nathangygi/src/pantry-web/src/components/Header.tsx":"4","/Users/nathangygi/src/pantry-web/src/global/globalState.tsx":"5","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx":"6","/Users/nathangygi/src/pantry-web/src/screens/PantryLookup/PantryLookup.tsx":"7","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx":"8","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx":"9","/Users/nathangygi/src/pantry-web/src/screens/Reports/Reports.tsx":"10","/Users/nathangygi/src/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx":"11","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx":"12","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx":"13","/Users/nathangygi/src/pantry-web/src/screens/PantryLogin/PantryLogin.tsx":"14","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx":"15","/Users/nathangygi/src/pantry-web/src/screens/ClientUpload/ClientUpload.tsx":"16","/Users/nathangygi/src/pantry-web/src/constants/COLORS.ts":"17","/Users/nathangygi/src/pantry-web/src/utils/useImmutableState.ts":"18","/Users/nathangygi/src/pantry-web/src/components/StyledText.tsx":"19","/Users/nathangygi/src/pantry-web/src/models/client.schema.ts":"20","/Users/nathangygi/src/pantry-web/src/api/pantry/lookupPantry.ts":"21","/Users/nathangygi/src/pantry-web/src/api/pantry/registerPantry.ts":"22","/Users/nathangygi/src/pantry-web/src/api/client/getAllPantryClients.ts":"23","/Users/nathangygi/src/pantry-web/src/api/client/registerClient.ts":"24","/Users/nathangygi/src/pantry-web/src/api/pantry/getPantry.ts":"25","/Users/nathangygi/src/pantry-web/src/components/DOM.tsx":"26","/Users/nathangygi/src/pantry-web/src/api/pantry/getNewPantryId.ts":"27","/Users/nathangygi/src/pantry-web/src/api/client/getNewClientId.ts":"28","/Users/nathangygi/src/pantry-web/src/api/client/lookupClient.ts":"29","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/checkInClient.ts":"30","/Users/nathangygi/src/pantry-web/src/services/firebase.service.tsx":"31","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/addCheckIn.ts":"32","/Users/nathangygi/src/pantry-web/src/config/firebase.config.ts":"33"},{"size":500,"mtime":1606959212000,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1606959212000,"results":"36","hashOfConfig":"35"},{"size":3134,"mtime":1619970553000,"results":"37","hashOfConfig":"35"},{"size":3412,"mtime":1615139490000,"results":"38","hashOfConfig":"35"},{"size":913,"mtime":1612840435000,"results":"39","hashOfConfig":"35"},{"size":1298,"mtime":1614302937000,"results":"40","hashOfConfig":"35"},{"size":6083,"mtime":1614392884000,"results":"41","hashOfConfig":"35"},{"size":2213,"mtime":1613100397000,"results":"42","hashOfConfig":"35"},{"size":1874,"mtime":1612841994000,"results":"43","hashOfConfig":"35"},{"size":5131,"mtime":1624725397936,"results":"44","hashOfConfig":"35"},{"size":11826,"mtime":1623806312299,"results":"45","hashOfConfig":"35"},{"size":16339,"mtime":1619970203000,"results":"46","hashOfConfig":"35"},{"size":8275,"mtime":1618882889000,"results":"47","hashOfConfig":"35"},{"size":9848,"mtime":1613102582000,"results":"48","hashOfConfig":"35"},{"size":8511,"mtime":1614303015000,"results":"49","hashOfConfig":"35"},{"size":12040,"mtime":1618884157000,"results":"50","hashOfConfig":"35"},{"size":438,"mtime":1614384564000,"results":"51","hashOfConfig":"35"},{"size":2985,"mtime":1608354771000,"results":"52","hashOfConfig":"35"},{"size":1040,"mtime":1606966881000,"results":"53","hashOfConfig":"35"},{"size":1315,"mtime":1619969485000,"results":"54","hashOfConfig":"35"},{"size":813,"mtime":1613106385000,"results":"55","hashOfConfig":"35"},{"size":749,"mtime":1613106348000,"results":"56","hashOfConfig":"35"},{"size":680,"mtime":1625022037335,"results":"57","hashOfConfig":"35"},{"size":1185,"mtime":1615594292000,"results":"58","hashOfConfig":"35"},{"size":209,"mtime":1613106224000,"results":"59","hashOfConfig":"35"},{"size":1529,"mtime":1606966879000,"results":"60","hashOfConfig":"35"},{"size":495,"mtime":1613106290000,"results":"61","hashOfConfig":"35"},{"size":493,"mtime":1613106279000,"results":"62","hashOfConfig":"35"},{"size":893,"mtime":1619970825000,"results":"63","hashOfConfig":"35"},{"size":947,"mtime":1619971100000,"results":"64","hashOfConfig":"35"},{"size":976,"mtime":1613106448000,"results":"65","hashOfConfig":"35"},{"size":528,"mtime":1613106361000,"results":"66","hashOfConfig":"35"},{"size":332,"mtime":1606968241000,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"534nsx",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/nathangygi/src/pantry-web/src/index.tsx",[],["143","144"],"/Users/nathangygi/src/pantry-web/src/reportWebVitals.ts",[],"/Users/nathangygi/src/pantry-web/src/App.tsx",["145","146"],"import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { GlobalContextProvider, useGlobalContext } from \"./global/globalState\";\nimport { ClientCheckin } from \"./screens/ClientCheckin/ClientCheckin\";\nimport { ClientRegistrationHouseholdInfo } from \"./screens/ClientRegistration/ClienRegistrationHouseholdInfo\";\nimport { ClientRegistration } from \"./screens/ClientRegistration/ClientRegistration\";\nimport { ClientRegistrationProvider } from \"./screens/ClientRegistration/ClientRegistrationState\";\nimport { ClientRegistrationSuccess } from \"./screens/ClientRegistration/ClientRegistrationSuccess\";\nimport { ClientUpload } from \"./screens/ClientUpload/ClientUpload\";\nimport { PantryLogin } from \"./screens/PantryLogin/PantryLogin\";\nimport { PantryLookup } from \"./screens/PantryLookup/PantryLookup\";\nimport { PantryRegistration } from \"./screens/PantryRegistration/PantryRegistration\";\nimport { PantryRegistrationSuccess } from \"./screens/PantryRegistration/PantryRegistrationSuccess\";\nimport { Reports } from \"./screens/Reports/Reports\";\n\nexport default function App() {\n  return (\n    <GlobalContextProvider>\n      <Router>\n        <Header />\n        <div>\n          <Switch>\n            <Route exact path=\"/client/checkin\">\n              <ClientCheckin />\n            </Route>\n            <Route exact path=\"/pantry/lookup\">\n              <PantryLookup />\n            </Route>\n            <Route exact path=\"/\">\n              <BaseRoute />\n            </Route>\n            <Route exact path=\"/pantry/register\">\n              <PantryRegistration />\n            </Route>\n            <Route exact path=\"/pantry/register/success/:pantryId\">\n              <PantryRegistrationSuccess />\n            </Route>\n            <Route exact path=\"/pantry/login\">\n              <PantryLogin />\n            </Route>\n            <ClientRegistrationProvider>\n              <Route exact path=\"/client/register\">\n                <ClientRegistration />\n              </Route>\n              <Route exact path=\"/client/register/householdInfo\">\n                <ClientRegistrationHouseholdInfo />\n              </Route>\n              <Route exact path=\"/client/register/success\">\n                <ClientRegistrationSuccess />\n              </Route>\n              <Route exact path=\"/client/upload\">\n                <ClientUpload />\n              </Route>\n              <Route exact path=\"/reports\">\n                <Reports />\n              </Route>\n            </ClientRegistrationProvider>\n          </Switch>\n        </div>\n      </Router>\n    </GlobalContextProvider>\n  );\n}\n\nfunction BaseRoute() {\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    } else {\n      history.push(\"/pantry/login\");\n    }\n  }, []);\n  return null;\n}\n","/Users/nathangygi/src/pantry-web/src/components/Header.tsx",[],"/Users/nathangygi/src/pantry-web/src/global/globalState.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/PantryLookup/PantryLookup.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx",["147"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useClientRegistrationContext } from \"./ClientRegistrationState\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n}));\n\nexport function ClientRegistrationSuccess() {\n  const classes = useStyles();\n  const [clientRegistrationState] = useClientRegistrationContext();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>The Client ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {clientRegistrationState.id}\n        </StyledText>\n        <StyledText>\n          Give this ID to the client and tell them to remember it.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n        {/* <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <Typography>Success!</Typography>\n        <Typography>Your Client ID is:</Typography>\n        <Typography>{clientRegistrationState.id}</Typography> */}\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx",["148"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { COLORS } from \"../../constants/COLORS\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport function PantryRegistrationSuccess() {\n  const classes = useStyles();\n  const { pantryId } = useParams<any>();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>Your Pantry ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {pantryId}\n        </StyledText>\n        <StyledText>\n          Keep track of this ID, the password, and the admin password.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/Reports/Reports.tsx",["149","150","151","152","153","154","155","156","157","158"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport ReportsIcon from \"@material-ui/icons/Assessment\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { Client, ClientKeys } from \"../../models/client.schema\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity, View } from \"react-native-web\";\nimport csv from \"csvtojson\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { registerClient } from \"../../api/client/registerClient\";\nimport { CSVLink } from \"react-csv\";\nimport moment from \"moment\";\nimport { Button, TextField, Grid } from \"@material-ui/core\";\nimport { getAllPantryClients } from \"../../api/client/getAllPantryClients\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nexport function Reports() {\n  const classes = useStyles();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [csvData, setCSVData] = useState<any[]>([]);\n\n  const [clientListStartDate, setClientListStartDate] = useState(\n    moment().startOf(\"M\").valueOf()\n  );\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n      }\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <ReportsIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Reports</Typography>\n\n        {errorMessage ? (\n          <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n            {errorMessage}\n          </StyledText>\n        ) : null}\n        {successMessage ? (\n          <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n            {successMessage}\n          </StyledText>\n        ) : null}\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"date-local\"\n              label=\"Next appointment\"\n              type=\"date\"\n              defaultValue=\"2017-05-24\"\n              value={moment(clientListStartDate).toDate()}\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </Grid>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: COLORS.primary,\n              color: COLORS.buttonTextColor,\n              marginTop: 16,\n            }}\n            onClick={async () => {\n              if (globalState.user) {\n              }\n            }}\n          >\n            Get Client Checkin Report\n          </Button>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: COLORS.primary,\n              color: COLORS.buttonTextColor,\n              marginTop: 16,\n            }}\n            onClick={async () => {\n              if (globalState.user) {\n                const clients = await getAllPantryClients({\n                  pantryId: globalState.user.pantry.id,\n                });\n                console.log(clients.length);\n                if (clients.length) {\n                  const data = clients.map((client) => {\n                    const clientData: any = _.merge(\n                      client,\n                      client.householdInfo\n                    );\n                    delete clientData.householdInfo;\n                    clientData.registrationDate = moment(\n                      clientData.registrationDate\n                    ).format(\"MM-DD-YYYY\");\n                    return clientData;\n                  });\n                  setCSVData(data);\n                }\n              }\n            }}\n          >\n            Get Current Client List\n          </Button>\n        </Grid>\n        {csvData.length ? (\n          <CSVLink\n            style={{ marginTop: 16 }}\n            data={csvData}\n            headers={ClientKeys.map((key) => ({ key, label: key }))}\n            filename={\"client_upload_results.csv\"}\n          >\n            {`Download Result File`}\n          </CSVLink>\n        ) : null}\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx",["159","160","161"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CheckinIcon from \"@material-ui/icons/Room\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { checkInClient } from \"../../api/clientCheckIn/checkInClient\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity } from \"react-native-web\";\nimport { Client } from \"../../models/client.schema\";\nimport { lookupClient } from \"../../api/client/lookupClient\";\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function ClientCheckin() {\n  const classes = useStyles();\n  const [globalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const history = useHistory();\n  const [showUploadButton, setShowUploadButton] = useState(false);\n  const [lookupErrorMessage, setLookupErrorMessage] = useState(\"\");\n  const [possibleClients, setPossibleClients] = useState<Client[]>([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  useEffect(() => {\n    if (!globalState.user) {\n      history.replace(\"/pantry/login\");\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <TouchableOpacity\n          onLongPress={() => {\n            setShowUploadButton(true);\n          }}\n        >\n          <Avatar className={classes.avatar}>\n            <CheckinIcon />\n          </Avatar>\n        </TouchableOpacity>\n        {showUploadButton ? (\n          <Button\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: COLORS.primary,\n              color: COLORS.buttonTextColor,\n              marginTop: 16,\n              marginBottom: 32,\n            }}\n            onClick={() => {\n              history.push(\"/client/upload\");\n            }}\n          >\n            Upload Existing Clients\n          </Button>\n        ) : null}\n        <Typography variant=\"h5\">Client Check-in</Typography>\n        <Formik\n          initialValues={{\n            clientId: \"\",\n          }}\n          onSubmit={async (values, { resetForm }) => {\n            setErrorMessage(\"\");\n            setSuccessMessage(\"\");\n            if (globalState.user) {\n              const checkin = await checkInClient({\n                clientId: `${values.clientId}`,\n                pantry: globalState.user.pantry,\n                volunteerName: `${globalState.user.firstName} ${globalState.user.lastName}`,\n                volunteerEmail: globalState.user.email,\n              });\n\n              if (checkin === null) {\n                setErrorMessage(\"Client not found. Please check the Client ID\");\n              } else {\n                setSuccessMessage(\n                  `Successful Check-in:\\nClient Name: ${\n                    checkin.client.firstName\n                  } ${checkin.client.lastName}\\n# of People in household: ${\n                    checkin.client.householdInfo.numAdults +\n                    checkin.client.householdInfo.numKids +\n                    checkin.client.householdInfo.numSeniors\n                  }`\n                );\n                resetForm();\n              }\n            }\n          }}\n        >\n          {({ handleBlur, handleChange, handleSubmit, values }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"clientId\"\n                    label=\"Client ID\"\n                    name=\"clientId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.clientId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor: !values.clientId\n                    ? COLORS.surface\n                    : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!values.clientId}\n              >\n                Check In Client\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New Client?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/client/register\");\n          }}\n        >\n          Register Client\n        </Button>\n\n        <Typography style={{ marginTop: 48 }} variant=\"h5\">\n          Client ID Lookup\n        </Typography>\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            zip: \"\",\n          }}\n          onSubmit={async (values) => {\n            setErrorMessage(\"\");\n            if (globalState.user) {\n              const possibleClients = await lookupClient({\n                firstName: _.capitalize(values.firstName),\n                lastName: _.capitalize(values.lastName),\n                zip: _.capitalize(values.zip),\n                pantryId: globalState.user.pantry.id,\n              });\n\n              setPossibleClients(possibleClients);\n              if (!hasSearched) {\n                setHasSearched(true);\n              }\n            }\n          }}\n        >\n          {({ handleBlur, handleChange, handleSubmit, values }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    id=\"firstName\"\n                    label=\"First Name (Optional)\"\n                    name=\"firstName\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"string\"\n                    value={values.firstName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    id=\"lastName\"\n                    label=\"Last Name (Optional)\"\n                    name=\"lastName\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"string\"\n                    value={values.lastName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"zip\"\n                    label=\"Zip Code (Optional)\"\n                    name=\"zip\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.zip}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor: !(\n                    values.firstName ||\n                    values.lastName ||\n                    values.zip\n                  )\n                    ? COLORS.surface\n                    : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!(values.firstName || values.lastName || values.zip)}\n              >\n                Lookup Client\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n\n        {possibleClients.length ? (\n          <Grid container spacing={2}>\n            <PossibleClientRow type={\"header\"} />\n            {possibleClients.map((client) => {\n              return (\n                <PossibleClientRow\n                  key={client.id}\n                  type={\"client\"}\n                  client={client}\n                />\n              );\n            })}\n          </Grid>\n        ) : hasSearched ? (\n          <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n            No Clients Found\n          </StyledText>\n        ) : null}\n        {globalState.user && globalState.user.isAdmin ? (\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: COLORS.primary,\n              color: COLORS.buttonTextColor,\n              marginTop: 16,\n            }}\n            onClick={() => history.push(\"/reports\")}\n          >\n            Reports\n          </Button>\n        ) : null}\n      </div>\n    </Container>\n  );\n}\n\nfunction PossibleClientRow(\n  p:\n    | {\n        type: \"header\";\n      }\n    | {\n        type: \"client\";\n        client: Client;\n      }\n) {\n  return (\n    <>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"Client ID\" : p.client.id}\n        </StyledText>\n      </Grid>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"First Name\" : p.client.firstName}\n        </StyledText>\n      </Grid>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"Last Name\" : p.client.lastName}\n        </StyledText>\n      </Grid>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"Zip Code\" : p.client.zip}\n        </StyledText>\n      </Grid>\n    </>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx",["162"],"import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport RegistrationIcon from \"@material-ui/icons/Assignment\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useClientRegistrationContext } from \"./ClientRegistrationState\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport { registerClient } from \"../../api/client/registerClient\";\nimport { useHistory } from \"react-router-dom\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Client } from \"../../models/client.schema\";\nimport { useGlobalContext } from \"../../global/globalState\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  formControl: {\n    minWidth: 120,\n    width: \"100%\",\n    backgroundColor: \"white\",\n  },\n}));\n\nexport function ClientRegistrationHouseholdInfo() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [\n    clientRegistrationState,\n    setClientRegistrationState,\n  ] = useClientRegistrationContext();\n  const [checked, setChecked] = useState(false);\n  const [globalState, setGlobalState] = useGlobalContext();\n\n  const limit = 10;\n\n  const numPeopleSelected =\n    clientRegistrationState.householdInfo.numAdults +\n    clientRegistrationState.householdInfo.numKids +\n    clientRegistrationState.householdInfo.numSeniors;\n\n  const numGenderSelected =\n    clientRegistrationState.householdInfo.numMales +\n    clientRegistrationState.householdInfo.numFemales +\n    clientRegistrationState.householdInfo.numOtherGender;\n\n  const numEthnicitySelected =\n    clientRegistrationState.householdInfo.numWhite +\n    clientRegistrationState.householdInfo.numBlack +\n    clientRegistrationState.householdInfo.numAsian +\n    clientRegistrationState.householdInfo.numHispanic +\n    clientRegistrationState.householdInfo.numOtherEthnicity;\n\n  const isValid =\n    checked &&\n    numPeopleSelected > 0 &&\n    numPeopleSelected === numGenderSelected &&\n    numPeopleSelected === numEthnicitySelected;\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <RegistrationIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Household Info</Typography>\n        <Typography style={{ fontSize: 14, marginBottom: 8 }}>\n          The total number from each section (age, gender, and ethnicity) must\n          be the same.\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">{`Age (${numPeopleSelected})`}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numKids\"># Kids</InputLabel>\n              <Select\n                labelId=\"numKids\"\n                id=\"numKids\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numKids}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numKids: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numAdults\"># Adults</InputLabel>\n              <Select\n                labelId=\"numAdults\"\n                id=\"numAdults\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numAdults}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numAdults: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numSeniors\"># Seniors</InputLabel>\n              <Select\n                labelId=\"numSeniors\"\n                id=\"numSeniors\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numSeniors}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numSeniors: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">{`Gender (${numGenderSelected})`}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numMales\"># Males</InputLabel>\n              <Select\n                labelId=\"numMales\"\n                id=\"numMales\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numMales}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numMales: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numFemales\"># Females</InputLabel>\n              <Select\n                labelId=\"numFemales\"\n                id=\"numFemales\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numFemales}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numFemales: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numOthers\"># Other</InputLabel>\n              <Select\n                labelId=\"numOtherGender\"\n                id=\"numOtherGender\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numOtherGender}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numOtherGender: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">{`Ethnicity (${numEthnicitySelected})`}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numWhite\"># White</InputLabel>\n              <Select\n                labelId=\"numWhite\"\n                id=\"numWhite\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numWhite}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numWhite: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numBlack\"># Black</InputLabel>\n              <Select\n                labelId=\"numBlack\"\n                id=\"numBlack\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numBlack}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numBlack: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numHispanic\"># Hispanic</InputLabel>\n              <Select\n                labelId=\"numHispanic\"\n                id=\"numHispanic\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numHispanic}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numHispanic: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numAsian\"># Asian</InputLabel>\n              <Select\n                labelId=\"numAsian\"\n                id=\"numAsian\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numAsian}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numAsian: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numOtherEthnicity\"># Other</InputLabel>\n              <Select\n                labelId=\"numOtherEthnicity\"\n                id=\"numOtherEthnicity\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numOtherEthnicity}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numOtherEthnicity: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12}>\n            <FormControlLabel\n              style={{ display: \"flex\", alignItems: \"flex-start\" }}\n              control={\n                <Checkbox\n                  style={{ color: COLORS.primary }}\n                  checked={checked}\n                  onChange={() => {\n                    setChecked(!checked);\n                  }}\n                  name=\"checkbox\"\n                />\n              }\n              label=\"I acknowledge that I meet the qualifcation requirements defined by the state that I live in. (Talk to your local food pantry for more information.)\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: isValid ? COLORS.primary : COLORS.surface,\n            color: COLORS.buttonTextColor,\n          }}\n          disabled={!isValid}\n          className={classes.submit}\n          onClick={async () => {\n            let clientData: Omit<Client, \"id\" | \"registrationDate\"> = {\n              ...clientRegistrationState,\n            };\n\n            if (globalState.user) {\n              clientData.registeredPantries = {\n                [globalState.user.pantry.id]: true,\n              };\n            }\n\n            const client = await registerClient({\n              client: clientData,\n            });\n\n            if (client) {\n              setClientRegistrationState({ id: `${client.id}` });\n              history.replace(\"/client/register/success\");\n            }\n          }}\n        >\n          Register\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/PantryLogin/PantryLogin.tsx",["163","164","165"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { getPantry } from \"../../api/pantry/getPantry\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function PantryLogin() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [selectedRadioButton, setSelectedRadioButton] = useState<\n    \"volunteer\" | \"admin\"\n  >(\"volunteer\");\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Login</Typography>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            row\n            aria-label=\"position\"\n            name=\"position\"\n            style={{ marginTop: 8 }}\n            value={selectedRadioButton}\n            onChange={(event) => {\n              if (\n                event.target.value === \"volunteer\" ||\n                event.target.value === \"admin\"\n              ) {\n                setSelectedRadioButton(event.target.value);\n              }\n            }}\n          >\n            <FormControlLabel\n              value=\"volunteer\"\n              control={<Radio color=\"primary\" />}\n              label=\"Volunteer\"\n            />\n            <FormControlLabel\n              value=\"admin\"\n              control={<Radio color=\"primary\" />}\n              label=\"Admin\"\n            />\n          </RadioGroup>\n        </FormControl>\n        <Formik\n          initialValues={{\n            pantryId: \"\",\n            password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          onSubmit={async (values) => {\n            const pantry = await getPantry({ id: `${values.pantryId}` });\n            if (!pantry) {\n              setErrorMessage(\"Invalid Pantry ID\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"volunteer\" &&\n              pantry.password !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"admin\" &&\n              pantry.adminPassword !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            const user = {\n              firstName: values.firstName,\n              lastName: values.lastName,\n              email: values.email,\n              pantry,\n              isAdmin: selectedRadioButton === \"admin\",\n            };\n            setGlobalState({\n              user,\n            });\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            history.push(\"/client/checkin\");\n          }}\n          validationSchema={Yup.object().shape({\n            pantryId: Yup.number().required(),\n            password: Yup.string().required(),\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required(),\n          })}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            isValid,\n          }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"pantryId\"\n                    label=\"Pantry ID\"\n                    name=\"pantryId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.pantryId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"password\"\n                    name=\"password\"\n                    label={\n                      selectedRadioButton === \"volunteer\"\n                        ? \"Password\"\n                        : \"Admin Password\"\n                    }\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"password\"\n                    value={values.password}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    value={values.firstName}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    fullWidth\n                    required\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    required\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email Address\"\n                    fullWidth\n                    type=\"email\"\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor:\n                    !isValid || !values.pantryId\n                      ? COLORS.surface\n                      : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!isValid || !values.pantryId}\n              >\n                Login\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New? Register your pantry to get started.\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/register\");\n          }}\n        >\n          Register Your Pantry\n        </Button>\n        <StyledText\n          style={{ color: COLORS.primary, marginTop: 16, marginBottom: 8 }}\n        >\n          Forgot your Pantry ID?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/lookup\");\n          }}\n        >\n          Lookup Pantry ID\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientUpload/ClientUpload.tsx",["166","167","168","169","170"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport UploadIcon from \"@material-ui/icons/CloudUpload\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { Client, ClientKeys } from \"../../models/client.schema\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity, View } from \"react-native-web\";\nimport csv from \"csvtojson\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport {\n  registerClient,\n  registerClientWithId,\n} from \"../../api/client/registerClient\";\nimport { CSVLink } from \"react-csv\";\nimport moment from \"moment\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function ClientUpload() {\n  const classes = useStyles();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [csvData, setCSVData] = useState<any[]>([]);\n  const [numUploaded, setNumUploaded] = useState(0);\n  const [totalNumUploading, setTotalNumUploading] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n      }\n    }\n  }, []);\n\n  function convertStringToEachFirstLetterCapitalized(val: string) {\n    return val\n      .split(\" \")\n      .map((a) => _.upperFirst(a.toLowerCase()))\n      .join(\" \");\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <UploadIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Upload Client List</Typography>\n        <View style={{ width: \"100%\" }}>\n          <StyledText style={{ marginTop: 4 }}>\n            {`* Must be a .csv file`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4 }}>{`* Fields:`}</StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* firstName (required)`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* lastName (required)`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* address`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* address2`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* city`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* state`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* zip`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* phoneNumber`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numAdults`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numKids`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numSeniors`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numMales`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numFemales`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numOtherGender`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numWhite`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numBlack`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numAsian`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numHispanic`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numOtherEthnicity`}\n          </StyledText>\n        </View>\n        <input\n          id=\"logo-upload-button\"\n          multiple={false}\n          accept=\".csv\"\n          onChange={async (event) => {\n            var file = event.target.files?.[0];\n            if (file) {\n              setIsUploading(true);\n              const csvText = await file.text();\n\n              csv({})\n                .fromString(csvText)\n                .then(async (data) => {\n                  if (!data.length) {\n                    setIsUploading(false);\n                    return;\n                  }\n\n                  if (!globalState.user?.pantry.id) {\n                    return;\n                  }\n                  const keys = Object.keys(data[0]);\n                  const missingFields: string[] = [];\n                  [\"firstName\", \"lastName\", \"address\"].forEach((key) => {\n                    if (!keys.includes(key)) {\n                      missingFields.push(key);\n                    }\n                  });\n\n                  if (missingFields.length) {\n                    setErrorMessage(\n                      `Missing Fields: ${missingFields.join(\", \")}`\n                    );\n                    setIsUploading(false);\n                    return;\n                  }\n\n                  const clientsToAdd: Omit<\n                    Client,\n                    \"id\" | \"registrationDate\"\n                  >[] = _.compact(\n                    data.map((clientData) => {\n                      if (!clientData.firstName || !clientData.lastName) {\n                        return;\n                      }\n                      return {\n                        firstName: convertStringToEachFirstLetterCapitalized(\n                          clientData.firstName\n                        ),\n                        lastName: convertStringToEachFirstLetterCapitalized(\n                          clientData.lastName\n                        ),\n                        address: convertStringToEachFirstLetterCapitalized(\n                          clientData.address ?? \"\"\n                        ),\n                        address2: convertStringToEachFirstLetterCapitalized(\n                          clientData.address2 ?? \"\"\n                        ),\n                        city: convertStringToEachFirstLetterCapitalized(\n                          clientData.city ?? \"\"\n                        ),\n                        phoneNumber: convertStringToEachFirstLetterCapitalized(\n                          clientData.phoneNumber ?? \"\"\n                        ),\n                        state: convertStringToEachFirstLetterCapitalized(\n                          clientData.state ?? \"\"\n                        ),\n                        zip: convertStringToEachFirstLetterCapitalized(\n                          clientData.zip ?? \"\"\n                        ),\n                        registeredPantries: {\n                          [globalState.user?.pantry.id ?? \"\"]: true,\n                        },\n                        householdInfo: {\n                          numAdults: parseInt(clientData.numAdults),\n                          numKids: parseInt(clientData.numKids),\n                          numSeniors: parseInt(clientData.numSeniors),\n                          numMales: parseInt(clientData.numMales),\n                          numFemales: parseInt(clientData.numFemales),\n                          numOtherGender: parseInt(clientData.numOtherGender),\n                          numWhite: parseInt(clientData.numWhite),\n                          numBlack: parseInt(clientData.numBlack),\n                          numAsian: parseInt(clientData.numAsian),\n                          numHispanic: parseInt(clientData.numHispanic),\n                          numOtherEthnicity: parseInt(\n                            clientData.numOtherEthnicity\n                          ),\n                        },\n                      };\n                    })\n                  );\n\n                  setTotalNumUploading(clientsToAdd.length);\n\n                  let numberUploaded = 0;\n\n                  try {\n                    const addedClients = _.compact(\n                      await Promise.all(\n                        clientsToAdd.map(async (clientToAdd) => {\n                          const newClient = await registerClient({\n                            client: clientToAdd,\n                          });\n                          numberUploaded++;\n                          setNumUploaded(numberUploaded);\n                          return newClient;\n                        })\n                      )\n                    );\n\n                    if (addedClients.length) {\n                      const data = addedClients.map((client) => {\n                        const clientData: any = _.merge(\n                          client,\n                          client.householdInfo\n                        );\n                        delete clientData.householdInfo;\n                        clientData.registrationDate = moment(\n                          clientData.registrationDate\n                        ).format(\"MM-DD-YYYY\");\n                        return clientData;\n                      });\n                      setCSVData(data);\n                    }\n                  } catch (e) {}\n                  setIsUploading(false);\n                });\n            }\n          }}\n          type=\"file\"\n          style={{ display: \"none\" }}\n        />\n        <label htmlFor=\"logo-upload-button\">\n          <TouchableOpacity\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              padding: 15,\n              backgroundColor: COLORS.primary,\n              marginTop: 32,\n              borderRadius: 8,\n              marginBottom: 16,\n            }}\n            onPress={() => {\n              setErrorMessage(\"\");\n            }}\n          >\n            <StyledText style={{ color: COLORS.onPrimary }}>\n              Choose File\n            </StyledText>\n          </TouchableOpacity>\n        </label>\n        {isUploading ? (\n          <>\n            <CircularProgress\n              size={14}\n              style={{ marginLeft: 12, color: COLORS.primary }}\n            />\n          </>\n        ) : null}\n        {totalNumUploading && numUploaded ? (\n          <StyledText>{`${numUploaded} of ${totalNumUploading} uploaded`}</StyledText>\n        ) : null}\n        {csvData.length ? (\n          <CSVLink\n            data={csvData}\n            headers={ClientKeys.map((key) => ({ key, label: key }))}\n            filename={\"client_upload_results.csv\"}\n          >\n            {`Download Result File`}\n          </CSVLink>\n        ) : null}\n        {errorMessage ? (\n          <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n            {errorMessage}\n          </StyledText>\n        ) : null}\n        {successMessage ? (\n          <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n            {successMessage}\n          </StyledText>\n        ) : null}\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/constants/COLORS.ts",[],"/Users/nathangygi/src/pantry-web/src/utils/useImmutableState.ts",[],"/Users/nathangygi/src/pantry-web/src/components/StyledText.tsx",[],"/Users/nathangygi/src/pantry-web/src/models/client.schema.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/lookupPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/registerPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/getAllPantryClients.ts",["171"],"/Users/nathangygi/src/pantry-web/src/api/client/registerClient.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/getPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/components/DOM.tsx",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/getNewPantryId.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/getNewClientId.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/lookupClient.ts",[],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/checkInClient.ts",[],"/Users/nathangygi/src/pantry-web/src/services/firebase.service.tsx",[],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/addCheckIn.ts",[],"/Users/nathangygi/src/pantry-web/src/config/firebase.config.ts",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":73,"column":10,"nodeType":"178","messageId":"179","endLine":73,"endColumn":21},{"ruleId":"180","severity":1,"message":"181","line":85,"column":6,"nodeType":"182","endLine":85,"endColumn":8,"suggestions":"183"},{"ruleId":"176","severity":1,"message":"184","line":8,"column":18,"nodeType":"178","messageId":"179","endLine":8,"endColumn":28},{"ruleId":"176","severity":1,"message":"184","line":7,"column":18,"nodeType":"178","messageId":"179","endLine":7,"endColumn":28},{"ruleId":"176","severity":1,"message":"185","line":9,"column":10,"nodeType":"178","messageId":"179","endLine":9,"endColumn":16},{"ruleId":"176","severity":1,"message":"186","line":11,"column":10,"nodeType":"178","messageId":"179","endLine":11,"endColumn":20},{"ruleId":"176","severity":1,"message":"187","line":12,"column":10,"nodeType":"178","messageId":"179","endLine":12,"endColumn":26},{"ruleId":"176","severity":1,"message":"188","line":12,"column":28,"nodeType":"178","messageId":"179","endLine":12,"endColumn":32},{"ruleId":"176","severity":1,"message":"189","line":13,"column":8,"nodeType":"178","messageId":"179","endLine":13,"endColumn":11},{"ruleId":"176","severity":1,"message":"190","line":16,"column":10,"nodeType":"178","messageId":"179","endLine":16,"endColumn":24},{"ruleId":"176","severity":1,"message":"191","line":49,"column":24,"nodeType":"178","messageId":"179","endLine":49,"endColumn":39},{"ruleId":"176","severity":1,"message":"192","line":50,"column":26,"nodeType":"178","messageId":"179","endLine":50,"endColumn":43},{"ruleId":"176","severity":1,"message":"193","line":54,"column":31,"nodeType":"178","messageId":"179","endLine":54,"endColumn":53},{"ruleId":"180","severity":1,"message":"194","line":66,"column":6,"nodeType":"182","endLine":66,"endColumn":8,"suggestions":"195"},{"ruleId":"176","severity":1,"message":"196","line":49,"column":10,"nodeType":"178","messageId":"179","endLine":49,"endColumn":28},{"ruleId":"176","severity":1,"message":"197","line":49,"column":30,"nodeType":"178","messageId":"179","endLine":49,"endColumn":51},{"ruleId":"180","severity":1,"message":"198","line":56,"column":6,"nodeType":"182","endLine":56,"endColumn":8,"suggestions":"199"},{"ruleId":"176","severity":1,"message":"200","line":58,"column":23,"nodeType":"178","messageId":"179","endLine":58,"endColumn":37},{"ruleId":"176","severity":1,"message":"177","line":48,"column":10,"nodeType":"178","messageId":"179","endLine":48,"endColumn":21},{"ruleId":"176","severity":1,"message":"192","line":50,"column":26,"nodeType":"178","messageId":"179","endLine":50,"endColumn":43},{"ruleId":"180","severity":1,"message":"181","line":64,"column":6,"nodeType":"182","endLine":64,"endColumn":8,"suggestions":"201"},{"ruleId":"176","severity":1,"message":"202","line":18,"column":3,"nodeType":"178","messageId":"179","endLine":18,"endColumn":23},{"ruleId":"176","severity":1,"message":"192","line":47,"column":26,"nodeType":"178","messageId":"179","endLine":47,"endColumn":43},{"ruleId":"176","severity":1,"message":"203","line":48,"column":9,"nodeType":"178","messageId":"179","endLine":48,"endColumn":16},{"ruleId":"180","severity":1,"message":"194","line":62,"column":6,"nodeType":"182","endLine":62,"endColumn":8,"suggestions":"204"},{"ruleId":"205","severity":1,"message":"206","line":185,"column":25,"nodeType":"207","messageId":"208","endLine":185,"endColumn":32},{"ruleId":"176","severity":1,"message":"209","line":2,"column":8,"nodeType":"178","messageId":"179","endLine":2,"endColumn":14},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"@typescript-eslint/no-unused-vars","'globalState' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setGlobalState'. Either include them or remove the dependency array.","ArrayExpression",["212"],"'Typography' is defined but never used.","'Client' is defined but never used.","'useHistory' is defined but never used.","'TouchableOpacity' is defined but never used.","'View' is defined but never used.","'csv' is defined but never used.","'registerClient' is defined but never used.","'setErrorMessage' is assigned a value but never used.","'setSuccessMessage' is assigned a value but never used.","'setClientListStartDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setGlobalState'. Either include it or remove the dependency array.",["213"],"'lookupErrorMessage' is assigned a value but never used.","'setLookupErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalState.user' and 'history'. Either include them or remove the dependency array.",["214"],"'setGlobalState' is assigned a value but never used.",["215"],"'registerClientWithId' is defined but never used.","'history' is assigned a value but never used.",["216"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'moment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"217","fix":"223"},{"desc":"219","fix":"224"},"Update the dependencies array to be: [history, setGlobalState]",{"range":"225","text":"226"},"Update the dependencies array to be: [setGlobalState]",{"range":"227","text":"228"},"Update the dependencies array to be: [globalState.user, history]",{"range":"229","text":"230"},{"range":"231","text":"226"},{"range":"232","text":"228"},[3112,3114],"[history, setGlobalState]",[2133,2135],"[setGlobalState]",[2024,2026],"[globalState.user, history]",[1954,1956],[2075,2077]]