[{"/Users/nathangygi/src/pantry-web/src/index.tsx":"1","/Users/nathangygi/src/pantry-web/src/reportWebVitals.ts":"2","/Users/nathangygi/src/pantry-web/src/App.tsx":"3","/Users/nathangygi/src/pantry-web/src/components/Header.tsx":"4","/Users/nathangygi/src/pantry-web/src/global/globalState.tsx":"5","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx":"6","/Users/nathangygi/src/pantry-web/src/screens/PantryLookup/PantryLookup.tsx":"7","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx":"8","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx":"9","/Users/nathangygi/src/pantry-web/src/screens/Reports/Reports.tsx":"10","/Users/nathangygi/src/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx":"11","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx":"12","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx":"13","/Users/nathangygi/src/pantry-web/src/screens/PantryLogin/PantryLogin.tsx":"14","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx":"15","/Users/nathangygi/src/pantry-web/src/screens/ClientUpload/ClientUpload.tsx":"16","/Users/nathangygi/src/pantry-web/src/constants/COLORS.ts":"17","/Users/nathangygi/src/pantry-web/src/utils/useImmutableState.ts":"18","/Users/nathangygi/src/pantry-web/src/components/StyledText.tsx":"19","/Users/nathangygi/src/pantry-web/src/models/client.schema.ts":"20","/Users/nathangygi/src/pantry-web/src/api/pantry/lookupPantry.ts":"21","/Users/nathangygi/src/pantry-web/src/api/pantry/registerPantry.ts":"22","/Users/nathangygi/src/pantry-web/src/api/client/getAllPantryClients.ts":"23","/Users/nathangygi/src/pantry-web/src/api/client/registerClient.ts":"24","/Users/nathangygi/src/pantry-web/src/api/pantry/getPantry.ts":"25","/Users/nathangygi/src/pantry-web/src/components/DOM.tsx":"26","/Users/nathangygi/src/pantry-web/src/api/pantry/getNewPantryId.ts":"27","/Users/nathangygi/src/pantry-web/src/api/client/getNewClientId.ts":"28","/Users/nathangygi/src/pantry-web/src/api/client/lookupClient.ts":"29","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/checkInClient.ts":"30","/Users/nathangygi/src/pantry-web/src/services/firebase.service.tsx":"31","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/addCheckIn.ts":"32","/Users/nathangygi/src/pantry-web/src/config/firebase.config.ts":"33","/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/getClientCheckinReport.ts":"34"},{"size":500,"mtime":1606959212000,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1606959212000,"results":"37","hashOfConfig":"36"},{"size":3154,"mtime":1625277773399,"results":"38","hashOfConfig":"36"},{"size":3412,"mtime":1615139490000,"results":"39","hashOfConfig":"36"},{"size":913,"mtime":1612840435000,"results":"40","hashOfConfig":"36"},{"size":1298,"mtime":1614302937000,"results":"41","hashOfConfig":"36"},{"size":6083,"mtime":1614392884000,"results":"42","hashOfConfig":"36"},{"size":2243,"mtime":1625276751181,"results":"43","hashOfConfig":"36"},{"size":1904,"mtime":1625276836416,"results":"44","hashOfConfig":"36"},{"size":9880,"mtime":1625026508584,"results":"45","hashOfConfig":"36"},{"size":11916,"mtime":1625276866829,"results":"46","hashOfConfig":"36"},{"size":16356,"mtime":1625276707387,"results":"47","hashOfConfig":"36"},{"size":8390,"mtime":1625277532603,"results":"48","hashOfConfig":"36"},{"size":9848,"mtime":1613102582000,"results":"49","hashOfConfig":"36"},{"size":8511,"mtime":1614303015000,"results":"50","hashOfConfig":"36"},{"size":15233,"mtime":1625276233983,"results":"51","hashOfConfig":"36"},{"size":438,"mtime":1614384564000,"results":"52","hashOfConfig":"36"},{"size":2985,"mtime":1608354771000,"results":"53","hashOfConfig":"36"},{"size":1040,"mtime":1606966881000,"results":"54","hashOfConfig":"36"},{"size":1315,"mtime":1619969485000,"results":"55","hashOfConfig":"36"},{"size":813,"mtime":1613106385000,"results":"56","hashOfConfig":"36"},{"size":749,"mtime":1613106348000,"results":"57","hashOfConfig":"36"},{"size":680,"mtime":1625022037335,"results":"58","hashOfConfig":"36"},{"size":1185,"mtime":1625275118465,"results":"59","hashOfConfig":"36"},{"size":209,"mtime":1613106224000,"results":"60","hashOfConfig":"36"},{"size":1529,"mtime":1606966879000,"results":"61","hashOfConfig":"36"},{"size":495,"mtime":1613106290000,"results":"62","hashOfConfig":"36"},{"size":493,"mtime":1613106279000,"results":"63","hashOfConfig":"36"},{"size":893,"mtime":1619970825000,"results":"64","hashOfConfig":"36"},{"size":947,"mtime":1619971100000,"results":"65","hashOfConfig":"36"},{"size":976,"mtime":1613106448000,"results":"66","hashOfConfig":"36"},{"size":528,"mtime":1613106361000,"results":"67","hashOfConfig":"36"},{"size":332,"mtime":1606968241000,"results":"68","hashOfConfig":"36"},{"size":1696,"mtime":1625026103520,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"534nsx",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"72"},"/Users/nathangygi/src/pantry-web/src/index.tsx",[],["150","151"],"/Users/nathangygi/src/pantry-web/src/reportWebVitals.ts",[],"/Users/nathangygi/src/pantry-web/src/App.tsx",["152","153"],"import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { GlobalContextProvider, useGlobalContext } from \"./global/globalState\";\nimport { ClientCheckin } from \"./screens/ClientCheckin/ClientCheckin\";\nimport { ClientRegistrationHouseholdInfo } from \"./screens/ClientRegistration/ClienRegistrationHouseholdInfo\";\nimport { ClientRegistration } from \"./screens/ClientRegistration/ClientRegistration\";\nimport { ClientRegistrationProvider } from \"./screens/ClientRegistration/ClientRegistrationState\";\nimport { ClientRegistrationSuccess } from \"./screens/ClientRegistration/ClientRegistrationSuccess\";\nimport { ClientUpload } from \"./screens/ClientUpload/ClientUpload\";\nimport { PantryLogin } from \"./screens/PantryLogin/PantryLogin\";\nimport { PantryLookup } from \"./screens/PantryLookup/PantryLookup\";\nimport { PantryRegistration } from \"./screens/PantryRegistration/PantryRegistration\";\nimport { PantryRegistrationSuccess } from \"./screens/PantryRegistration/PantryRegistrationSuccess\";\nimport { Reports } from \"./screens/Reports/Reports\";\n\nexport default function App() {\n  return (\n    <GlobalContextProvider>\n      <Router>\n        <Header />\n        <div>\n          <Switch>\n            <Route exact path=\"/client/checkin\">\n              <ClientCheckin />\n            </Route>\n            <Route exact path=\"/pantry/lookup\">\n              <PantryLookup />\n            </Route>\n            <Route exact path=\"/\">\n              <BaseRoute />\n            </Route>\n            <Route exact path=\"/pantry/register\">\n              <PantryRegistration />\n            </Route>\n            <Route exact path=\"/pantry/register/success/:pantryId\">\n              <PantryRegistrationSuccess />\n            </Route>\n            <Route exact path=\"/pantry/login\">\n              <PantryLogin />\n            </Route>\n            <ClientRegistrationProvider>\n              <Route exact path=\"/client/register/:pantryId\">\n                <ClientRegistration />\n              </Route>\n              <Route exact path=\"/client/register/householdInfo/:pantryId\">\n                <ClientRegistrationHouseholdInfo />\n              </Route>\n              <Route exact path=\"/client/register/success\">\n                <ClientRegistrationSuccess />\n              </Route>\n              <Route exact path=\"/client/upload\">\n                <ClientUpload />\n              </Route>\n              <Route exact path=\"/reports\">\n                <Reports />\n              </Route>\n            </ClientRegistrationProvider>\n          </Switch>\n        </div>\n      </Router>\n    </GlobalContextProvider>\n  );\n}\n\nfunction BaseRoute() {\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    } else {\n      history.push(\"/pantry/login\");\n    }\n  }, []);\n  return null;\n}\n","/Users/nathangygi/src/pantry-web/src/components/Header.tsx",[],"/Users/nathangygi/src/pantry-web/src/global/globalState.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/PantryLookup/PantryLookup.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx",["154"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useClientRegistrationContext } from \"./ClientRegistrationState\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n}));\n\nexport function ClientRegistrationSuccess() {\n  const classes = useStyles();\n  const [clientRegistrationState] = useClientRegistrationContext();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>The Client ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {clientRegistrationState.id}\n        </StyledText>\n        <StyledText>\n          Give this ID to the client and tell them to remember it.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n            marginBottom: 64,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n        {/* <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <Typography>Success!</Typography>\n        <Typography>Your Client ID is:</Typography>\n        <Typography>{clientRegistrationState.id}</Typography> */}\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx",["155"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { COLORS } from \"../../constants/COLORS\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport function PantryRegistrationSuccess() {\n  const classes = useStyles();\n  const { pantryId } = useParams<any>();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>Your Pantry ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {pantryId}\n        </StyledText>\n        <StyledText>\n          Keep track of this ID, the password, and the admin password.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n            marginBottom: 64,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/Reports/Reports.tsx",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport ReportsIcon from \"@material-ui/icons/Assessment\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { Client, ClientKeys } from \"../../models/client.schema\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity, View } from \"react-native-web\";\nimport csv from \"csvtojson\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { registerClient } from \"../../api/client/registerClient\";\nimport { CSVLink } from \"react-csv\";\nimport moment from \"moment\";\nimport { Button, TextField, Grid } from \"@material-ui/core\";\nimport { getAllPantryClients } from \"../../api/client/getAllPantryClients\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\nimport { getClientCheckinReport } from \"../../api/clientCheckIn/getClientCheckinReport\";\nimport { checkInClient } from \"../../api/clientCheckIn/checkInClient\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nexport function Reports() {\n  const classes = useStyles();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [csvData, setCSVData] = useState<any[]>([]);\n\n  const [startDateMS, setStartDateMS] = useState(\n    moment().startOf(\"M\").startOf(\"D\").valueOf()\n  );\n  const [endDateMS, setEndDateMS] = useState(moment().endOf(\"D\").valueOf());\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n      }\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <ReportsIcon />\n          </Avatar>\n          <Typography variant=\"h5\">Reports</Typography>\n\n          {errorMessage ? (\n            <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n              {errorMessage}\n            </StyledText>\n          ) : null}\n          {successMessage ? (\n            <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n              {successMessage}\n            </StyledText>\n          ) : null}\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <KeyboardDatePicker\n                style={{ width: \"100%\" }}\n                autoOk={true}\n                showTodayButton={true}\n                value={moment(startDateMS).toDate()}\n                format=\"YYYY-MM-DD\"\n                onChange={(newDate) => {\n                  if (newDate?.valueOf()) {\n                    setStartDateMS(\n                      moment(newDate.valueOf()).startOf(\"D\").valueOf()\n                    );\n                  }\n                }}\n                maxDate={moment()}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <KeyboardDatePicker\n                style={{ width: \"100%\" }}\n                autoOk={true}\n                showTodayButton={true}\n                value={moment(endDateMS).toDate()}\n                format=\"YYYY-MM-DD\"\n                onChange={(newDate) => {\n                  if (newDate?.valueOf()) {\n                    setEndDateMS(\n                      moment(newDate.valueOf()).endOf(\"D\").valueOf()\n                    );\n                  }\n                }}\n                maxDate={moment()}\n              />\n            </Grid>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              style={{\n                backgroundColor: COLORS.primary,\n                color: COLORS.buttonTextColor,\n                marginTop: 16,\n              }}\n              onClick={async () => {\n                if (globalState.user) {\n                  const clientCheckinsAndClient = await getClientCheckinReport({\n                    pantryId: globalState.user.pantry.id,\n                    startDateMS,\n                    endDateMS,\n                  });\n                  let numAdults = 0;\n                  let numKids = 0;\n                  let numSeniors = 0;\n                  let numMales = 0;\n                  let numFemales = 0;\n                  let numOtherGender = 0;\n                  let numWhite = 0;\n                  let numBlack = 0;\n                  let numHispanic = 0;\n                  let numAsian = 0;\n                  let numOtherEthnicity = 0;\n                  console.log(\"HERE\");\n                  if (clientCheckinsAndClient.length) {\n                    const data = clientCheckinsAndClient.map(\n                      (checkinAndClient) => {\n                        numAdults +=\n                          checkinAndClient.client.householdInfo.numAdults;\n                        numKids +=\n                          checkinAndClient.client.householdInfo.numKids;\n                        numSeniors +=\n                          checkinAndClient.client.householdInfo.numSeniors;\n                        numMales +=\n                          checkinAndClient.client.householdInfo.numMales;\n                        numFemales +=\n                          checkinAndClient.client.householdInfo.numFemales;\n                        numOtherGender +=\n                          checkinAndClient.client.householdInfo.numOtherGender;\n                        numWhite +=\n                          checkinAndClient.client.householdInfo.numWhite;\n                        numBlack +=\n                          checkinAndClient.client.householdInfo.numBlack;\n                        numHispanic +=\n                          checkinAndClient.client.householdInfo.numHispanic;\n                        numAsian +=\n                          checkinAndClient.client.householdInfo.numAsian;\n                        numOtherEthnicity +=\n                          checkinAndClient.client.householdInfo\n                            .numOtherEthnicity;\n                        const { clientCheckIn, client } = checkinAndClient;\n                        const clientCheckInData: any = { ...clientCheckIn };\n                        const clientData: any = _.merge(\n                          client,\n                          client.householdInfo\n                        );\n                        delete clientData.householdInfo;\n                        delete clientData.registeredPantries;\n                        clientData.registrationDate = moment(\n                          clientData.registrationDate\n                        ).format(\"MM-DD-YYYY\");\n                        clientCheckInData.checkinDate = moment(\n                          clientCheckInData.checkinDate\n                        ).format(\"MM-DD-YYYY\");\n                        console.log(\"BLAH\");\n                        console.log(_.merge(clientData, clientCheckInData));\n                        return _.merge(clientData, clientCheckInData);\n                      }\n                    );\n                    setCSVData(data);\n                  }\n                }\n              }}\n            >\n              Get Client Checkin Report\n            </Button>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              style={{\n                backgroundColor: COLORS.primary,\n                color: COLORS.buttonTextColor,\n                marginTop: 64,\n              }}\n              onClick={async () => {\n                if (globalState.user) {\n                  const clients = await getAllPantryClients({\n                    pantryId: globalState.user.pantry.id,\n                  });\n                  console.log(globalState.user.pantry.id);\n                  if (clients.length) {\n                    const data = clients.map((client) => {\n                      const clientData: any = _.merge(\n                        client,\n                        client.householdInfo\n                      );\n                      delete clientData.householdInfo;\n                      delete clientData.registeredPantries;\n                      clientData.registrationDate = moment(\n                        clientData.registrationDate\n                      ).format(\"MM-DD-YYYY\");\n                      return clientData;\n                    });\n                    setCSVData(data);\n                  }\n                }\n              }}\n            >\n              Get Master Client List\n            </Button>\n          </Grid>\n          {csvData.length ? (\n            <CSVLink\n              style={{ marginTop: 16 }}\n              data={csvData}\n              headers={ClientKeys.map((key) => ({ key, label: key }))}\n              filename={\"client_upload_results.csv\"}\n            >\n              {`Download Result File`}\n            </CSVLink>\n          ) : null}\n        </div>\n      </MuiPickersUtilsProvider>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx",["179","180","181"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CheckinIcon from \"@material-ui/icons/Room\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { checkInClient } from \"../../api/clientCheckIn/checkInClient\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity } from \"react-native-web\";\nimport { Client } from \"../../models/client.schema\";\nimport { lookupClient } from \"../../api/client/lookupClient\";\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function ClientCheckin() {\n  const classes = useStyles();\n  const [globalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const history = useHistory();\n  const [showUploadButton, setShowUploadButton] = useState(false);\n  const [lookupErrorMessage, setLookupErrorMessage] = useState(\"\");\n  const [possibleClients, setPossibleClients] = useState<Client[]>([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  useEffect(() => {\n    if (!globalState.user) {\n      history.replace(\"/pantry/login\");\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <TouchableOpacity\n          onLongPress={() => {\n            setShowUploadButton(true);\n          }}\n        >\n          <Avatar className={classes.avatar}>\n            <CheckinIcon />\n          </Avatar>\n        </TouchableOpacity>\n        {showUploadButton ? (\n          <Button\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: COLORS.primary,\n              color: COLORS.buttonTextColor,\n              marginTop: 16,\n              marginBottom: 32,\n            }}\n            onClick={() => {\n              history.push(\"/client/upload\");\n            }}\n          >\n            Upload Existing Clients\n          </Button>\n        ) : null}\n        <Typography variant=\"h5\">Client Check-in</Typography>\n        <Formik\n          initialValues={{\n            clientId: \"\",\n          }}\n          onSubmit={async (values, { resetForm }) => {\n            setErrorMessage(\"\");\n            setSuccessMessage(\"\");\n            if (globalState.user) {\n              const checkin = await checkInClient({\n                clientId: `${values.clientId}`,\n                pantry: globalState.user.pantry,\n                volunteerName: `${globalState.user.firstName} ${globalState.user.lastName}`,\n                volunteerEmail: globalState.user.email,\n              });\n\n              if (checkin === null) {\n                setErrorMessage(\"Client not found. Please check the Client ID\");\n              } else {\n                setSuccessMessage(\n                  `Successful Check-in:\\nClient Name: ${\n                    checkin.client.firstName\n                  } ${checkin.client.lastName}\\n# of People in household: ${\n                    checkin.client.householdInfo.numAdults +\n                    checkin.client.householdInfo.numKids +\n                    checkin.client.householdInfo.numSeniors\n                  }`\n                );\n                resetForm();\n              }\n            }\n          }}\n        >\n          {({ handleBlur, handleChange, handleSubmit, values }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"clientId\"\n                    label=\"Client ID\"\n                    name=\"clientId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.clientId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor: !values.clientId\n                    ? COLORS.surface\n                    : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!values.clientId}\n              >\n                Check In Client\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New Client?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            if (globalState.user) {\n              history.push(`/client/register/${globalState.user.pantry.id}`);\n            }\n          }}\n        >\n          Register Client\n        </Button>\n\n        <Typography style={{ marginTop: 48 }} variant=\"h5\">\n          Client ID Lookup\n        </Typography>\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            zip: \"\",\n          }}\n          onSubmit={async (values) => {\n            setErrorMessage(\"\");\n            if (globalState.user) {\n              const possibleClients = await lookupClient({\n                firstName: _.capitalize(values.firstName),\n                lastName: _.capitalize(values.lastName),\n                zip: _.capitalize(values.zip),\n                pantryId: globalState.user.pantry.id,\n              });\n\n              setPossibleClients(possibleClients);\n              if (!hasSearched) {\n                setHasSearched(true);\n              }\n            }\n          }}\n        >\n          {({ handleBlur, handleChange, handleSubmit, values }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    id=\"firstName\"\n                    label=\"First Name (Optional)\"\n                    name=\"firstName\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"string\"\n                    value={values.firstName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    id=\"lastName\"\n                    label=\"Last Name (Optional)\"\n                    name=\"lastName\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"string\"\n                    value={values.lastName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"zip\"\n                    label=\"Zip Code (Optional)\"\n                    name=\"zip\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.zip}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor: !(\n                    values.firstName ||\n                    values.lastName ||\n                    values.zip\n                  )\n                    ? COLORS.surface\n                    : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!(values.firstName || values.lastName || values.zip)}\n              >\n                Lookup Client\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n\n        {possibleClients.length ? (\n          <Grid container spacing={2}>\n            <PossibleClientRow type={\"header\"} />\n            {possibleClients.map((client) => {\n              return (\n                <PossibleClientRow\n                  key={client.id}\n                  type={\"client\"}\n                  client={client}\n                />\n              );\n            })}\n          </Grid>\n        ) : hasSearched ? (\n          <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n            No Clients Found\n          </StyledText>\n        ) : null}\n        {/* {globalState.user && globalState.user.isAdmin ? (\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: COLORS.primary,\n              color: COLORS.buttonTextColor,\n              marginTop: 16,\n            }}\n            onClick={() => history.push(\"/reports\")}\n          >\n            Reports\n          </Button>\n        ) : null} */}\n      </div>\n    </Container>\n  );\n}\n\nfunction PossibleClientRow(\n  p:\n    | {\n        type: \"header\";\n      }\n    | {\n        type: \"client\";\n        client: Client;\n      }\n) {\n  return (\n    <>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"Client ID\" : p.client.id}\n        </StyledText>\n      </Grid>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"First Name\" : p.client.firstName}\n        </StyledText>\n      </Grid>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"Last Name\" : p.client.lastName}\n        </StyledText>\n      </Grid>\n      <Grid item xs={3}>\n        <StyledText variant={p.type === \"header\" ? \"bold\" : undefined}>\n          {p.type === \"header\" ? \"Zip Code\" : p.client.zip}\n        </StyledText>\n      </Grid>\n    </>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx",["182","183"],"import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport RegistrationIcon from \"@material-ui/icons/Assignment\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useClientRegistrationContext } from \"./ClientRegistrationState\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport { registerClient } from \"../../api/client/registerClient\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Client } from \"../../models/client.schema\";\nimport { useGlobalContext } from \"../../global/globalState\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  formControl: {\n    minWidth: 120,\n    width: \"100%\",\n    backgroundColor: \"white\",\n  },\n}));\n\nexport function ClientRegistrationHouseholdInfo() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [clientRegistrationState, setClientRegistrationState] =\n    useClientRegistrationContext();\n  const [checked, setChecked] = useState(false);\n  const [globalState, setGlobalState] = useGlobalContext();\n  const { pantryId } = useParams<any>();\n\n  const limit = 10;\n\n  const numPeopleSelected =\n    clientRegistrationState.householdInfo.numAdults +\n    clientRegistrationState.householdInfo.numKids +\n    clientRegistrationState.householdInfo.numSeniors;\n\n  const numGenderSelected =\n    clientRegistrationState.householdInfo.numMales +\n    clientRegistrationState.householdInfo.numFemales +\n    clientRegistrationState.householdInfo.numOtherGender;\n\n  const numEthnicitySelected =\n    clientRegistrationState.householdInfo.numWhite +\n    clientRegistrationState.householdInfo.numBlack +\n    clientRegistrationState.householdInfo.numAsian +\n    clientRegistrationState.householdInfo.numHispanic +\n    clientRegistrationState.householdInfo.numOtherEthnicity;\n\n  const isValid =\n    checked &&\n    numPeopleSelected > 0 &&\n    numPeopleSelected === numGenderSelected &&\n    numPeopleSelected === numEthnicitySelected;\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <RegistrationIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Household Info</Typography>\n        <Typography style={{ fontSize: 14, marginBottom: 8 }}>\n          The total number from each section (age, gender, and ethnicity) must\n          be the same.\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">{`Age (${numPeopleSelected})`}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numKids\"># Kids</InputLabel>\n              <Select\n                labelId=\"numKids\"\n                id=\"numKids\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numKids}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numKids: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numAdults\"># Adults</InputLabel>\n              <Select\n                labelId=\"numAdults\"\n                id=\"numAdults\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numAdults}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numAdults: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numSeniors\"># Seniors</InputLabel>\n              <Select\n                labelId=\"numSeniors\"\n                id=\"numSeniors\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numSeniors}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numSeniors: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">{`Gender (${numGenderSelected})`}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numMales\"># Males</InputLabel>\n              <Select\n                labelId=\"numMales\"\n                id=\"numMales\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numMales}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numMales: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numFemales\"># Females</InputLabel>\n              <Select\n                labelId=\"numFemales\"\n                id=\"numFemales\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numFemales}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numFemales: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numOthers\"># Other</InputLabel>\n              <Select\n                labelId=\"numOtherGender\"\n                id=\"numOtherGender\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numOtherGender}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numOtherGender: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">{`Ethnicity (${numEthnicitySelected})`}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numWhite\"># White</InputLabel>\n              <Select\n                labelId=\"numWhite\"\n                id=\"numWhite\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numWhite}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numWhite: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numBlack\"># Black</InputLabel>\n              <Select\n                labelId=\"numBlack\"\n                id=\"numBlack\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numBlack}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numBlack: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numHispanic\"># Hispanic</InputLabel>\n              <Select\n                labelId=\"numHispanic\"\n                id=\"numHispanic\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numHispanic}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numHispanic: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numAsian\"># Asian</InputLabel>\n              <Select\n                labelId=\"numAsian\"\n                id=\"numAsian\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numAsian}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numAsian: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n              <InputLabel id=\"numOtherEthnicity\"># Other</InputLabel>\n              <Select\n                labelId=\"numOtherEthnicity\"\n                id=\"numOtherEthnicity\"\n                type=\"number\"\n                value={clientRegistrationState.householdInfo.numOtherEthnicity}\n                onChange={(e) => {\n                  setClientRegistrationState({\n                    householdInfo: {\n                      ...clientRegistrationState.householdInfo,\n                      ...{ numOtherEthnicity: e.target.value as number },\n                    },\n                  });\n                }}\n              >\n                {Array.from(Array(limit).keys()).map((val) => {\n                  return (\n                    <MenuItem key={val} value={val}>\n                      {val}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12}>\n            <FormControlLabel\n              style={{ display: \"flex\", alignItems: \"flex-start\" }}\n              control={\n                <Checkbox\n                  style={{ color: COLORS.primary }}\n                  checked={checked}\n                  onChange={() => {\n                    setChecked(!checked);\n                  }}\n                  name=\"checkbox\"\n                />\n              }\n              label=\"I acknowledge that I meet the qualifcation requirements defined by the state that I live in. (Talk to your local food pantry for more information.)\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: isValid ? COLORS.primary : COLORS.surface,\n            color: COLORS.buttonTextColor,\n          }}\n          disabled={!isValid}\n          className={classes.submit}\n          onClick={async () => {\n            let clientData: Omit<Client, \"id\" | \"registrationDate\"> = {\n              ...clientRegistrationState,\n            };\n\n            if (pantryId) {\n              clientData.registeredPantries = {\n                [pantryId]: true,\n              };\n            }\n\n            const client = await registerClient({\n              client: clientData,\n            });\n\n            if (client) {\n              setClientRegistrationState({ id: `${client.id}` });\n              history.replace(\"/client/register/success\");\n            }\n          }}\n        >\n          Register\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/PantryLogin/PantryLogin.tsx",["184","185","186"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { getPantry } from \"../../api/pantry/getPantry\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function PantryLogin() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [selectedRadioButton, setSelectedRadioButton] = useState<\n    \"volunteer\" | \"admin\"\n  >(\"volunteer\");\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Login</Typography>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            row\n            aria-label=\"position\"\n            name=\"position\"\n            style={{ marginTop: 8 }}\n            value={selectedRadioButton}\n            onChange={(event) => {\n              if (\n                event.target.value === \"volunteer\" ||\n                event.target.value === \"admin\"\n              ) {\n                setSelectedRadioButton(event.target.value);\n              }\n            }}\n          >\n            <FormControlLabel\n              value=\"volunteer\"\n              control={<Radio color=\"primary\" />}\n              label=\"Volunteer\"\n            />\n            <FormControlLabel\n              value=\"admin\"\n              control={<Radio color=\"primary\" />}\n              label=\"Admin\"\n            />\n          </RadioGroup>\n        </FormControl>\n        <Formik\n          initialValues={{\n            pantryId: \"\",\n            password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          onSubmit={async (values) => {\n            const pantry = await getPantry({ id: `${values.pantryId}` });\n            if (!pantry) {\n              setErrorMessage(\"Invalid Pantry ID\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"volunteer\" &&\n              pantry.password !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"admin\" &&\n              pantry.adminPassword !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            const user = {\n              firstName: values.firstName,\n              lastName: values.lastName,\n              email: values.email,\n              pantry,\n              isAdmin: selectedRadioButton === \"admin\",\n            };\n            setGlobalState({\n              user,\n            });\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            history.push(\"/client/checkin\");\n          }}\n          validationSchema={Yup.object().shape({\n            pantryId: Yup.number().required(),\n            password: Yup.string().required(),\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required(),\n          })}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            isValid,\n          }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"pantryId\"\n                    label=\"Pantry ID\"\n                    name=\"pantryId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.pantryId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"password\"\n                    name=\"password\"\n                    label={\n                      selectedRadioButton === \"volunteer\"\n                        ? \"Password\"\n                        : \"Admin Password\"\n                    }\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"password\"\n                    value={values.password}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    value={values.firstName}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    fullWidth\n                    required\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    required\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email Address\"\n                    fullWidth\n                    type=\"email\"\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor:\n                    !isValid || !values.pantryId\n                      ? COLORS.surface\n                      : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!isValid || !values.pantryId}\n              >\n                Login\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New? Register your pantry to get started.\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/register\");\n          }}\n        >\n          Register Your Pantry\n        </Button>\n        <StyledText\n          style={{ color: COLORS.primary, marginTop: 16, marginBottom: 8 }}\n        >\n          Forgot your Pantry ID?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/lookup\");\n          }}\n        >\n          Lookup Pantry ID\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx",[],"/Users/nathangygi/src/pantry-web/src/screens/ClientUpload/ClientUpload.tsx",["187","188","189","190","191"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport UploadIcon from \"@material-ui/icons/CloudUpload\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { Client, ClientKeys } from \"../../models/client.schema\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport { TouchableOpacity, View } from \"react-native-web\";\nimport csv from \"csvtojson\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport {\n  registerClient,\n  registerClientWithId,\n} from \"../../api/client/registerClient\";\nimport { CSVLink } from \"react-csv\";\nimport moment from \"moment\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function ClientUpload() {\n  const classes = useStyles();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [csvData, setCSVData] = useState<any[]>([]);\n  const [numUploaded, setNumUploaded] = useState(0);\n  const [totalNumUploading, setTotalNumUploading] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n      }\n    }\n  }, []);\n\n  function convertStringToEachFirstLetterCapitalized(val: string) {\n    return val\n      .split(\" \")\n      .map((a) => _.upperFirst(a.toLowerCase()))\n      .join(\" \");\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <UploadIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Upload Client List</Typography>\n        <View style={{ width: \"100%\" }}>\n          <StyledText style={{ marginTop: 4 }}>\n            {`* Must be a .csv file`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4 }}>{`* Fields:`}</StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* firstName (required)`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* lastName (required)`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* address`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* address2`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* city`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* state`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* zip`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* phoneNumber`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numAdults`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numKids`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numSeniors`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numMales`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numFemales`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numOtherGender`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numWhite`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numBlack`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numAsian`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numHispanic`}\n          </StyledText>\n          <StyledText style={{ marginTop: 4, marginLeft: 16 }}>\n            {`* numOtherEthnicity`}\n          </StyledText>\n        </View>\n        <input\n          id=\"logo-upload-button\"\n          multiple={false}\n          accept=\".csv\"\n          onChange={async (event) => {\n            var file = event.target.files?.[0];\n            if (file) {\n              setIsUploading(true);\n              const csvText = await file.text();\n\n              csv({})\n                .fromString(csvText)\n                .then(async (data) => {\n                  if (!data.length) {\n                    setIsUploading(false);\n                    return;\n                  }\n\n                  if (!globalState.user?.pantry.id) {\n                    return;\n                  }\n                  const keys = Object.keys(data[0]);\n                  const missingFields: string[] = [];\n                  [\"firstName\", \"lastName\", \"address\"].forEach((key) => {\n                    if (!keys.includes(key)) {\n                      missingFields.push(key);\n                    }\n                  });\n\n                  if (missingFields.length) {\n                    setErrorMessage(\n                      `Missing Fields: ${missingFields.join(\", \")}`\n                    );\n                    setIsUploading(false);\n                    return;\n                  }\n\n                  // const clientsToAdd: Omit<Client, \"registrationDate\">[] =\n                  //   _.compact(\n                  //     data.map((clientData) => {\n                  //       if (!clientData.firstName || !clientData.lastName) {\n                  //         return;\n                  //       }\n                  //       return {\n                  //         id: clientData.id,\n                  //         firstName: convertStringToEachFirstLetterCapitalized(\n                  //           clientData.firstName\n                  //         ),\n                  //         lastName: convertStringToEachFirstLetterCapitalized(\n                  //           clientData.lastName\n                  //         ),\n                  //         address: convertStringToEachFirstLetterCapitalized(\n                  //           clientData.address ?? \"\"\n                  //         ),\n                  //         address2: convertStringToEachFirstLetterCapitalized(\n                  //           clientData.address2 ?? \"\"\n                  //         ),\n                  //         city: convertStringToEachFirstLetterCapitalized(\n                  //           clientData.city ?? \"\"\n                  //         ),\n                  //         phoneNumber:\n                  //           convertStringToEachFirstLetterCapitalized(\n                  //             clientData.phoneNumber ?? \"\"\n                  //           ),\n                  //         state: clientData.state ?? \"\",\n                  //         zip: convertStringToEachFirstLetterCapitalized(\n                  //           clientData.zip ?? \"\"\n                  //         ),\n                  //         registeredPantries: {\n                  //           [globalState.user?.pantry.id ?? \"\"]: true,\n                  //         },\n                  //         householdInfo: {\n                  //           numAdults: parseInt(clientData.numAdults ?? \"0\"),\n                  //           numKids: parseInt(clientData.numKids ?? \"0\"),\n                  //           numSeniors: parseInt(clientData.numSeniors ?? \"0\"),\n                  //           numMales: parseInt(clientData.numMales ?? \"0\"),\n                  //           numFemales: parseInt(clientData.numFemales ?? \"0\"),\n                  //           numOtherGender: parseInt(\n                  //             clientData.numOtherGender ?? \"0\"\n                  //           ),\n                  //           numWhite: parseInt(clientData.numWhite ?? \"0\"),\n                  //           numBlack: parseInt(clientData.numBlack ?? \"0\"),\n                  //           numAsian: parseInt(clientData.numAsian ?? \"0\"),\n                  //           numHispanic: parseInt(\n                  //             clientData.numHispanic ?? \"0\"\n                  //           ),\n                  //           numOtherEthnicity: parseInt(\n                  //             clientData.numOtherEthnicity ?? \"0\"\n                  //           ),\n                  //         },\n                  //       };\n                  //     })\n                  //   );\n\n                  const clientsToAdd: Omit<\n                    Client,\n                    \"id\" | \"registrationDate\"\n                  >[] = _.compact(\n                    data.map((clientData) => {\n                      if (!clientData.firstName || !clientData.lastName) {\n                        return;\n                      }\n                      return {\n                        firstName: convertStringToEachFirstLetterCapitalized(\n                          clientData.firstName\n                        ),\n                        lastName: convertStringToEachFirstLetterCapitalized(\n                          clientData.lastName\n                        ),\n                        address: convertStringToEachFirstLetterCapitalized(\n                          clientData.address ?? \"\"\n                        ),\n                        address2: convertStringToEachFirstLetterCapitalized(\n                          clientData.address2 ?? \"\"\n                        ),\n                        city: convertStringToEachFirstLetterCapitalized(\n                          clientData.city ?? \"\"\n                        ),\n                        phoneNumber: convertStringToEachFirstLetterCapitalized(\n                          clientData.phoneNumber ?? \"\"\n                        ),\n                        state: clientData.state ?? \"\",\n                        zip: convertStringToEachFirstLetterCapitalized(\n                          clientData.zip ?? \"\"\n                        ),\n                        registeredPantries: {\n                          [globalState.user?.pantry.id ?? \"\"]: true,\n                        },\n                        householdInfo: {\n                          numAdults: parseInt(clientData.numAdults ?? \"0\"),\n                          numKids: parseInt(clientData.numKids ?? \"0\"),\n                          numSeniors: parseInt(clientData.numSeniors ?? \"0\"),\n                          numMales: parseInt(clientData.numMales ?? \"0\"),\n                          numFemales: parseInt(clientData.numFemales ?? \"0\"),\n                          numOtherGender: parseInt(\n                            clientData.numOtherGender ?? \"0\"\n                          ),\n                          numWhite: parseInt(clientData.numWhite ?? \"0\"),\n                          numBlack: parseInt(clientData.numBlack ?? \"0\"),\n                          numAsian: parseInt(clientData.numAsian ?? \"0\"),\n                          numHispanic: parseInt(clientData.numHispanic ?? \"0\"),\n                          numOtherEthnicity: parseInt(\n                            clientData.numOtherEthnicity ?? \"0\"\n                          ),\n                        },\n                      };\n                    })\n                  );\n\n                  setTotalNumUploading(clientsToAdd.length);\n\n                  let numberUploaded = 0;\n\n                  try {\n                    const addedClients = _.compact(\n                      await Promise.all(\n                        clientsToAdd.map(async (clientToAdd) => {\n                          const newClient = await registerClient({\n                            client: clientToAdd,\n                          });\n                          numberUploaded++;\n                          setNumUploaded(numberUploaded);\n                          return newClient;\n                        })\n                      )\n                    );\n\n                    if (addedClients.length) {\n                      const data = addedClients.map((client) => {\n                        const clientData: any = _.merge(\n                          client,\n                          client.householdInfo\n                        );\n                        delete clientData.householdInfo;\n                        delete clientData.registeredPantries;\n                        clientData.registrationDate = moment(\n                          clientData.registrationDate\n                        ).format(\"MM-DD-YYYY\");\n                        return clientData;\n                      });\n                      setCSVData(data);\n                    }\n                  } catch (e) {}\n                  setIsUploading(false);\n                });\n            }\n          }}\n          type=\"file\"\n          style={{ display: \"none\" }}\n        />\n        <label htmlFor=\"logo-upload-button\">\n          <TouchableOpacity\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              padding: 15,\n              backgroundColor: COLORS.primary,\n              marginTop: 32,\n              borderRadius: 8,\n              marginBottom: 16,\n            }}\n            onPress={() => {\n              setErrorMessage(\"\");\n            }}\n          >\n            <StyledText style={{ color: COLORS.onPrimary }}>\n              Choose File\n            </StyledText>\n          </TouchableOpacity>\n        </label>\n        {isUploading ? (\n          <>\n            <CircularProgress\n              size={14}\n              style={{ marginLeft: 12, color: COLORS.primary }}\n            />\n          </>\n        ) : null}\n        {totalNumUploading && numUploaded ? (\n          <StyledText>{`${numUploaded} of ${totalNumUploading} uploaded`}</StyledText>\n        ) : null}\n        {csvData.length ? (\n          <CSVLink\n            data={csvData}\n            headers={ClientKeys.map((key) => ({ key, label: key }))}\n            filename={\"client_upload_results.csv\"}\n          >\n            {`Download Result File`}\n          </CSVLink>\n        ) : null}\n        {errorMessage ? (\n          <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n            {errorMessage}\n          </StyledText>\n        ) : null}\n        {successMessage ? (\n          <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n            {successMessage}\n          </StyledText>\n        ) : null}\n      </div>\n    </Container>\n  );\n}\n","/Users/nathangygi/src/pantry-web/src/constants/COLORS.ts",[],"/Users/nathangygi/src/pantry-web/src/utils/useImmutableState.ts",[],"/Users/nathangygi/src/pantry-web/src/components/StyledText.tsx",[],"/Users/nathangygi/src/pantry-web/src/models/client.schema.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/lookupPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/registerPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/getAllPantryClients.ts",["192"],"import _ from \"lodash\";\nimport moment from \"moment\";\nimport { Client } from \"../../models/client.schema\";\nimport { getPantryFirestore } from \"../../services/firebase.service\";\n\nexport async function getAllPantryClients(p: { pantryId: string }) {\n  let clients: Client[] = [];\n  const r = await getPantryFirestore().Client.query({\n    where: [{ registeredPantries: { [p.pantryId]: [\"==\", true] } }],\n    limit: 400,\n  });\n\n  clients = _.concat(clients, r.docs);\n  let nextQuery = r.nextQuery;\n\n  while (nextQuery) {\n    const r2 = await getPantryFirestore().Client.query(nextQuery);\n\n    clients = _.concat(clients, r2.docs);\n    nextQuery = r2.nextQuery;\n  }\n\n  return clients;\n}\n","/Users/nathangygi/src/pantry-web/src/api/client/registerClient.ts",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/getPantry.ts",[],"/Users/nathangygi/src/pantry-web/src/components/DOM.tsx",[],"/Users/nathangygi/src/pantry-web/src/api/pantry/getNewPantryId.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/getNewClientId.ts",[],"/Users/nathangygi/src/pantry-web/src/api/client/lookupClient.ts",[],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/checkInClient.ts",[],"/Users/nathangygi/src/pantry-web/src/services/firebase.service.tsx",[],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/addCheckIn.ts",[],"/Users/nathangygi/src/pantry-web/src/config/firebase.config.ts",[],["193","194"],"/Users/nathangygi/src/pantry-web/src/api/clientCheckIn/getClientCheckinReport.ts",["195"],"import _ from \"lodash\";\nimport moment from \"moment\";\nimport { Client } from \"../../models/client.schema\";\nimport { ClientCheckin } from \"../../models/clientCheckin.schema\";\nimport { getPantryFirestore } from \"../../services/firebase.service\";\n\nexport async function getClientCheckinReport(p: {\n  pantryId: string;\n  startDateMS: number;\n  endDateMS: number;\n}) {\n  let clientCheckins: ClientCheckin[] = [];\n  let clientCheckinsAndClients: {\n    clientCheckIn: ClientCheckin;\n    client: Client;\n  }[] = [];\n  const r = await getPantryFirestore().ClientCheckin.query({\n    where: [\n      { pantryId: [\"==\", p.pantryId] },\n      { checkinDate: [\">\", p.startDateMS] },\n      { checkinDate: [\"<\", p.endDateMS] },\n    ],\n    limit: 400,\n  });\n\n  clientCheckins = _.concat(clientCheckins, r.docs);\n  let nextQuery = r.nextQuery;\n\n  while (nextQuery) {\n    const r2 = await getPantryFirestore().ClientCheckin.query(nextQuery);\n\n    clientCheckins = _.concat(clientCheckins, r2.docs);\n    nextQuery = r2.nextQuery;\n  }\n\n  const uniqueClientsIds = _.uniq(clientCheckins.map((ccin) => ccin.clientId));\n\n  const clients = await getPantryFirestore().Client.getDocs(uniqueClientsIds);\n\n  const clientsMap = clients.reduce((acc, val) => {\n    if (val) {\n      acc[val.id] = val;\n    }\n    return acc;\n  }, {} as Record<string, Client>);\n\n  for (\n    let i = 0;\n    i < _.orderBy(clientCheckins, \"checkinDate\", \"desc\").length;\n    i++\n  ) {\n    const clientCheckIn = clientCheckins[i];\n    const client = clientsMap[clientCheckIn.clientId];\n    if (clientCheckIn && client) {\n      clientCheckinsAndClients.push({\n        client,\n        clientCheckIn,\n      });\n    }\n  }\n\n  return clientCheckinsAndClients;\n}\n",{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":73,"column":10,"nodeType":"202","messageId":"203","endLine":73,"endColumn":21},{"ruleId":"204","severity":1,"message":"205","line":85,"column":6,"nodeType":"206","endLine":85,"endColumn":8,"suggestions":"207"},{"ruleId":"200","severity":1,"message":"208","line":8,"column":18,"nodeType":"202","messageId":"203","endLine":8,"endColumn":28},{"ruleId":"200","severity":1,"message":"208","line":7,"column":18,"nodeType":"202","messageId":"203","endLine":7,"endColumn":28},{"ruleId":"200","severity":1,"message":"209","line":9,"column":10,"nodeType":"202","messageId":"203","endLine":9,"endColumn":16},{"ruleId":"200","severity":1,"message":"210","line":11,"column":10,"nodeType":"202","messageId":"203","endLine":11,"endColumn":20},{"ruleId":"200","severity":1,"message":"211","line":12,"column":10,"nodeType":"202","messageId":"203","endLine":12,"endColumn":26},{"ruleId":"200","severity":1,"message":"212","line":12,"column":28,"nodeType":"202","messageId":"203","endLine":12,"endColumn":32},{"ruleId":"200","severity":1,"message":"213","line":13,"column":8,"nodeType":"202","messageId":"203","endLine":13,"endColumn":11},{"ruleId":"200","severity":1,"message":"214","line":16,"column":10,"nodeType":"202","messageId":"203","endLine":16,"endColumn":24},{"ruleId":"200","severity":1,"message":"215","line":19,"column":18,"nodeType":"202","messageId":"203","endLine":19,"endColumn":27},{"ruleId":"200","severity":1,"message":"216","line":26,"column":10,"nodeType":"202","messageId":"203","endLine":26,"endColumn":31},{"ruleId":"200","severity":1,"message":"217","line":28,"column":10,"nodeType":"202","messageId":"203","endLine":28,"endColumn":23},{"ruleId":"200","severity":1,"message":"218","line":57,"column":24,"nodeType":"202","messageId":"203","endLine":57,"endColumn":39},{"ruleId":"200","severity":1,"message":"219","line":58,"column":26,"nodeType":"202","messageId":"203","endLine":58,"endColumn":43},{"ruleId":"204","severity":1,"message":"220","line":75,"column":6,"nodeType":"206","endLine":75,"endColumn":8,"suggestions":"221"},{"ruleId":"200","severity":1,"message":"222","line":162,"column":25,"nodeType":"202","messageId":"203","endLine":162,"endColumn":34},{"ruleId":"200","severity":1,"message":"223","line":164,"column":25,"nodeType":"202","messageId":"203","endLine":164,"endColumn":32},{"ruleId":"200","severity":1,"message":"224","line":166,"column":25,"nodeType":"202","messageId":"203","endLine":166,"endColumn":35},{"ruleId":"200","severity":1,"message":"225","line":168,"column":25,"nodeType":"202","messageId":"203","endLine":168,"endColumn":33},{"ruleId":"200","severity":1,"message":"226","line":170,"column":25,"nodeType":"202","messageId":"203","endLine":170,"endColumn":35},{"ruleId":"200","severity":1,"message":"227","line":172,"column":25,"nodeType":"202","messageId":"203","endLine":172,"endColumn":39},{"ruleId":"200","severity":1,"message":"228","line":174,"column":25,"nodeType":"202","messageId":"203","endLine":174,"endColumn":33},{"ruleId":"200","severity":1,"message":"229","line":176,"column":25,"nodeType":"202","messageId":"203","endLine":176,"endColumn":33},{"ruleId":"200","severity":1,"message":"230","line":178,"column":25,"nodeType":"202","messageId":"203","endLine":178,"endColumn":36},{"ruleId":"200","severity":1,"message":"231","line":180,"column":25,"nodeType":"202","messageId":"203","endLine":180,"endColumn":33},{"ruleId":"200","severity":1,"message":"232","line":182,"column":25,"nodeType":"202","messageId":"203","endLine":182,"endColumn":42},{"ruleId":"200","severity":1,"message":"233","line":49,"column":10,"nodeType":"202","messageId":"203","endLine":49,"endColumn":28},{"ruleId":"200","severity":1,"message":"234","line":49,"column":30,"nodeType":"202","messageId":"203","endLine":49,"endColumn":51},{"ruleId":"204","severity":1,"message":"235","line":56,"column":6,"nodeType":"206","endLine":56,"endColumn":8,"suggestions":"236"},{"ruleId":"200","severity":1,"message":"201","line":56,"column":10,"nodeType":"202","messageId":"203","endLine":56,"endColumn":21},{"ruleId":"200","severity":1,"message":"237","line":56,"column":23,"nodeType":"202","messageId":"203","endLine":56,"endColumn":37},{"ruleId":"200","severity":1,"message":"201","line":48,"column":10,"nodeType":"202","messageId":"203","endLine":48,"endColumn":21},{"ruleId":"200","severity":1,"message":"219","line":50,"column":26,"nodeType":"202","messageId":"203","endLine":50,"endColumn":43},{"ruleId":"204","severity":1,"message":"205","line":64,"column":6,"nodeType":"206","endLine":64,"endColumn":8,"suggestions":"238"},{"ruleId":"200","severity":1,"message":"239","line":18,"column":3,"nodeType":"202","messageId":"203","endLine":18,"endColumn":23},{"ruleId":"200","severity":1,"message":"219","line":47,"column":26,"nodeType":"202","messageId":"203","endLine":47,"endColumn":43},{"ruleId":"200","severity":1,"message":"240","line":48,"column":9,"nodeType":"202","messageId":"203","endLine":48,"endColumn":16},{"ruleId":"204","severity":1,"message":"220","line":62,"column":6,"nodeType":"206","endLine":62,"endColumn":8,"suggestions":"241"},{"ruleId":"242","severity":1,"message":"243","line":242,"column":25,"nodeType":"244","messageId":"245","endLine":242,"endColumn":32},{"ruleId":"200","severity":1,"message":"246","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":14},{"ruleId":"196","replacedBy":"247"},{"ruleId":"198","replacedBy":"248"},{"ruleId":"200","severity":1,"message":"246","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":14},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"@typescript-eslint/no-unused-vars","'globalState' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setGlobalState'. Either include them or remove the dependency array.","ArrayExpression",["251"],"'Typography' is defined but never used.","'Client' is defined but never used.","'useHistory' is defined but never used.","'TouchableOpacity' is defined but never used.","'View' is defined but never used.","'csv' is defined but never used.","'registerClient' is defined but never used.","'TextField' is defined but never used.","'MaterialUiPickersDate' is defined but never used.","'checkInClient' is defined but never used.","'setErrorMessage' is assigned a value but never used.","'setSuccessMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setGlobalState'. Either include it or remove the dependency array.",["252"],"'numAdults' is assigned a value but never used.","'numKids' is assigned a value but never used.","'numSeniors' is assigned a value but never used.","'numMales' is assigned a value but never used.","'numFemales' is assigned a value but never used.","'numOtherGender' is assigned a value but never used.","'numWhite' is assigned a value but never used.","'numBlack' is assigned a value but never used.","'numHispanic' is assigned a value but never used.","'numAsian' is assigned a value but never used.","'numOtherEthnicity' is assigned a value but never used.","'lookupErrorMessage' is assigned a value but never used.","'setLookupErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalState.user' and 'history'. Either include them or remove the dependency array.",["253"],"'setGlobalState' is assigned a value but never used.",["254"],"'registerClientWithId' is defined but never used.","'history' is assigned a value but never used.",["255"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'moment' is defined but never used.",["249"],["250"],"no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"256","fix":"262"},{"desc":"258","fix":"263"},"Update the dependencies array to be: [history, setGlobalState]",{"range":"264","text":"265"},"Update the dependencies array to be: [setGlobalState]",{"range":"266","text":"267"},"Update the dependencies array to be: [globalState.user, history]",{"range":"268","text":"269"},{"range":"270","text":"265"},{"range":"271","text":"267"},[3132,3134],"[history, setGlobalState]",[2574,2576],"[setGlobalState]",[2024,2026],"[globalState.user, history]",[1954,1956],[2075,2077]]