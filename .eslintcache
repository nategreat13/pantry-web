[{"/Users/nate/nate/pantry-web/src/index.tsx":"1","/Users/nate/nate/pantry-web/src/reportWebVitals.ts":"2","/Users/nate/nate/pantry-web/src/App.tsx":"3","/Users/nate/nate/pantry-web/src/constants/COLORS.ts":"4","/Users/nate/nate/pantry-web/src/components/StyledText.tsx":"5","/Users/nate/nate/pantry-web/src/components/DOM.tsx":"6","/Users/nate/nate/pantry-web/src/config/firebase.config.ts":"7","/Users/nate/nate/pantry-web/src/firebase.js":"8","/Users/nate/nate/pantry-web/src/screens/Home.tsx":"9","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx":"10","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx":"11","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx":"12","/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts":"13","/Users/nate/nate/pantry-web/src/api/client/registerClient.ts":"14","/Users/nate/nate/pantry-web/src/services/firebase.service.tsx":"15","/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts":"16","/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx":"17","/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts":"18","/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts":"19","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx":"20","/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx":"21","/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx":"22","/Users/nate/nate/pantry-web/src/global/globalState.tsx":"23","/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts":"24","/Users/nate/nate/pantry-web/src/components/Header.tsx":"25","/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx":"26","/Users/nate/nate/pantry-web/src/api/clientCheckIn/checkInClient.ts":"27","/Users/nate/nate/pantry-web/src/api/clientCheckIn/addCheckIn.ts":"28","/Users/nate/nate/pantry-web/src/screens/ClientLookup/ClientLookup.tsx":"29","/Users/nate/nate/pantry-web/src/api/client/lookupClient.ts":"30","/Users/nate/nate/pantry-web/src/screens/PantryLookup/PantryLookup.tsx":"31","/Users/nate/nate/pantry-web/src/api/pantry/lookupPantry.ts":"32","/Users/nate/nate/pantry-web/src/api/client/getClient.ts":"33","/Users/nate/nate/pantry-web/src/screens/ClientUpload/ClientUpload.tsx":"34","/Users/nate/nate/pantry-web/src/models/client.schema.ts":"35"},{"size":500,"mtime":1606959212220,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":1606959212221,"results":"38","hashOfConfig":"37"},{"size":3276,"mtime":1614143573752,"results":"39","hashOfConfig":"37"},{"size":438,"mtime":1614384564046,"results":"40","hashOfConfig":"37"},{"size":1040,"mtime":1606966881447,"results":"41","hashOfConfig":"37"},{"size":1529,"mtime":1606966879929,"results":"42","hashOfConfig":"37"},{"size":332,"mtime":1606968241716,"results":"43","hashOfConfig":"37"},{"size":373,"mtime":1609294399085,"results":"44","hashOfConfig":"37"},{"size":4159,"mtime":1612840362497,"results":"45","hashOfConfig":"37"},{"size":8275,"mtime":1614302928657,"results":"46","hashOfConfig":"37"},{"size":15879,"mtime":1614135820091,"results":"47","hashOfConfig":"37"},{"size":1298,"mtime":1614302937773,"results":"48","hashOfConfig":"37"},{"size":2985,"mtime":1608354771033,"results":"49","hashOfConfig":"37"},{"size":722,"mtime":1614136003535,"results":"50","hashOfConfig":"37"},{"size":976,"mtime":1613106448574,"results":"51","hashOfConfig":"37"},{"size":493,"mtime":1613106279894,"results":"52","hashOfConfig":"37"},{"size":2213,"mtime":1613100397765,"results":"53","hashOfConfig":"37"},{"size":749,"mtime":1613106348808,"results":"54","hashOfConfig":"37"},{"size":495,"mtime":1613106290430,"results":"55","hashOfConfig":"37"},{"size":8511,"mtime":1614303015879,"results":"56","hashOfConfig":"37"},{"size":1874,"mtime":1612841994702,"results":"57","hashOfConfig":"37"},{"size":9848,"mtime":1613102582782,"results":"58","hashOfConfig":"37"},{"size":913,"mtime":1612840435282,"results":"59","hashOfConfig":"37"},{"size":209,"mtime":1613106224388,"results":"60","hashOfConfig":"37"},{"size":3412,"mtime":1613100720461,"results":"61","hashOfConfig":"37"},{"size":11166,"mtime":1614992919511,"results":"62","hashOfConfig":"37"},{"size":605,"mtime":1613106224388,"results":"63","hashOfConfig":"37"},{"size":528,"mtime":1613106361722,"results":"64","hashOfConfig":"37"},{"size":7099,"mtime":1613100219975,"results":"65","hashOfConfig":"37"},{"size":751,"mtime":1613106317601,"results":"66","hashOfConfig":"37"},{"size":6083,"mtime":1614392884019,"results":"67","hashOfConfig":"37"},{"size":813,"mtime":1613106385368,"results":"68","hashOfConfig":"37"},{"size":294,"mtime":1613103423521,"results":"69","hashOfConfig":"37"},{"size":11768,"mtime":1614992860032,"results":"70","hashOfConfig":"37"},{"size":1244,"mtime":1614322079606,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1uv1hoe",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/nate/nate/pantry-web/src/index.tsx",[],["147","148"],"/Users/nate/nate/pantry-web/src/reportWebVitals.ts",[],"/Users/nate/nate/pantry-web/src/App.tsx",["149","150"],"import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { GlobalContextProvider, useGlobalContext } from \"./global/globalState\";\nimport { ClientCheckin } from \"./screens/ClientCheckin/ClientCheckin\";\nimport { ClientLookup } from \"./screens/ClientLookup/ClientLookup\";\nimport { ClientRegistrationHouseholdInfo } from \"./screens/ClientRegistration/ClienRegistrationHouseholdInfo\";\nimport { ClientRegistration } from \"./screens/ClientRegistration/ClientRegistration\";\nimport { ClientRegistrationProvider } from \"./screens/ClientRegistration/ClientRegistrationState\";\nimport { ClientRegistrationSuccess } from \"./screens/ClientRegistration/ClientRegistrationSuccess\";\nimport { ClientUpload } from \"./screens/ClientUpload/ClientUpload\";\nimport { Home } from \"./screens/Home\";\nimport { PantryLogin } from \"./screens/PantryLogin/PantryLogin\";\nimport { PantryLookup } from \"./screens/PantryLookup/PantryLookup\";\nimport { PantryRegistration } from \"./screens/PantryRegistration/PantryRegistration\";\nimport { PantryRegistrationSuccess } from \"./screens/PantryRegistration/PantryRegistrationSuccess\";\n\nexport default function App() {\n  return (\n    <GlobalContextProvider>\n      <Router>\n        <Header />\n        <div>\n          <Switch>\n            <Route exact path=\"/client/checkin\">\n              <ClientCheckin />\n            </Route>\n            <Route exact path=\"/client/lookup\">\n              <ClientLookup />\n            </Route>\n            <Route exact path=\"/pantry/lookup\">\n              <PantryLookup />\n            </Route>\n            <Route exact path=\"/\">\n              <BaseRoute />\n            </Route>\n            <Route exact path=\"/home\">\n              <Home />\n            </Route>\n            <Route exact path=\"/pantry/register\">\n              <PantryRegistration />\n            </Route>\n            <Route exact path=\"/pantry/register/success/:pantryId\">\n              <PantryRegistrationSuccess />\n            </Route>\n            <Route exact path=\"/pantry/login\">\n              <PantryLogin />\n            </Route>\n            <ClientRegistrationProvider>\n              <Route exact path=\"/client/register\">\n                <ClientRegistration />\n              </Route>\n              <Route exact path=\"/client/register/householdInfo\">\n                <ClientRegistrationHouseholdInfo />\n              </Route>\n              <Route exact path=\"/client/register/success\">\n                <ClientRegistrationSuccess />\n              </Route>\n              <Route exact path=\"/client/upload\">\n                <ClientUpload />\n              </Route>\n            </ClientRegistrationProvider>\n          </Switch>\n        </div>\n      </Router>\n    </GlobalContextProvider>\n  );\n}\n\nfunction BaseRoute() {\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    } else {\n      history.push(\"/pantry/login\");\n    }\n  }, []);\n  return null;\n}\n","/Users/nate/nate/pantry-web/src/constants/COLORS.ts",[],"/Users/nate/nate/pantry-web/src/components/StyledText.tsx",[],"/Users/nate/nate/pantry-web/src/components/DOM.tsx",[],"/Users/nate/nate/pantry-web/src/config/firebase.config.ts",[],"/Users/nate/nate/pantry-web/src/firebase.js",[],"/Users/nate/nate/pantry-web/src/screens/Home.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClienRegistrationHouseholdInfo.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationState.tsx",[],"/Users/nate/nate/pantry-web/src/utils/useImmutableState.ts",[],"/Users/nate/nate/pantry-web/src/api/client/registerClient.ts",[],"/Users/nate/nate/pantry-web/src/services/firebase.service.tsx",[],"/Users/nate/nate/pantry-web/src/api/client/getNewClientId.ts",[],"/Users/nate/nate/pantry-web/src/screens/ClientRegistration/ClientRegistrationSuccess.tsx",["151"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useClientRegistrationContext } from \"./ClientRegistrationState\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n}));\n\nexport function ClientRegistrationSuccess() {\n  const classes = useStyles();\n  const [clientRegistrationState] = useClientRegistrationContext();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>The Client ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {clientRegistrationState.id}\n        </StyledText>\n        <StyledText>\n          Give this ID to the client and tell them to remember it.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n        {/* <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <Typography>Success!</Typography>\n        <Typography>Your Client ID is:</Typography>\n        <Typography>{clientRegistrationState.id}</Typography> */}\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/api/pantry/registerPantry.ts",[],"/Users/nate/nate/pantry-web/src/api/pantry/getNewPantryId.ts",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistration.tsx",[],"/Users/nate/nate/pantry-web/src/screens/PantryRegistration/PantryRegistrationSuccess.tsx",["152"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { StyledText } from \"../../components/StyledText\";\nimport { COLORS } from \"../../constants/COLORS\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport function PantryRegistrationSuccess() {\n  const classes = useStyles();\n  const { pantryId } = useParams<any>();\n  const history = useHistory();\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <CheckIcon />\n        </Avatar>\n        <StyledText>Success!</StyledText>\n        <StyledText>Your Pantry ID is:</StyledText>\n        <StyledText style={{ fontSize: 24, marginTop: 12, marginBottom: 12 }}>\n          {pantryId}\n        </StyledText>\n        <StyledText>\n          Keep track of this ID, the password, and the admin password.\n        </StyledText>\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n            marginTop: 16,\n          }}\n          onClick={() => {\n            history.replace(\"/pantry/login\");\n          }}\n        >\n          Got it\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/screens/PantryLogin/PantryLogin.tsx",["153","154","155"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { getPantry } from \"../../api/pantry/getPantry\";\nimport { useGlobalContext } from \"../../global/globalState\";\nimport { COLORS } from \"../../constants/COLORS\";\nimport { StyledText } from \"../../components/StyledText\";\nimport {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: COLORS.primary,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function PantryLogin() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [globalState, setGlobalState] = useGlobalContext();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [selectedRadioButton, setSelectedRadioButton] = useState<\n    \"volunteer\" | \"admin\"\n  >(\"volunteer\");\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const user = JSON.parse(loggedInUser);\n      if (user) {\n        setGlobalState({ user });\n        history.push(\"/client/checkin\");\n      }\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\" style={{ marginBottom: 48 }}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography variant=\"h5\">Login</Typography>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            row\n            aria-label=\"position\"\n            name=\"position\"\n            style={{ marginTop: 8 }}\n            value={selectedRadioButton}\n            onChange={(event) => {\n              if (\n                event.target.value === \"volunteer\" ||\n                event.target.value === \"admin\"\n              ) {\n                setSelectedRadioButton(event.target.value);\n              }\n            }}\n          >\n            <FormControlLabel\n              value=\"volunteer\"\n              control={<Radio color=\"primary\" />}\n              label=\"Volunteer\"\n            />\n            <FormControlLabel\n              value=\"admin\"\n              control={<Radio color=\"primary\" />}\n              label=\"Admin\"\n            />\n          </RadioGroup>\n        </FormControl>\n        <Formik\n          initialValues={{\n            pantryId: \"\",\n            password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          onSubmit={async (values) => {\n            const pantry = await getPantry({ id: `${values.pantryId}` });\n            if (!pantry) {\n              setErrorMessage(\"Invalid Pantry ID\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"volunteer\" &&\n              pantry.password !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            if (\n              selectedRadioButton === \"admin\" &&\n              pantry.adminPassword !== values.password\n            ) {\n              setErrorMessage(\"Incorrect Password\");\n              return;\n            }\n            const user = {\n              firstName: values.firstName,\n              lastName: values.lastName,\n              email: values.email,\n              pantry,\n              isAdmin: selectedRadioButton === \"admin\",\n            };\n            setGlobalState({\n              user,\n            });\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            history.push(\"/client/checkin\");\n          }}\n          validationSchema={Yup.object().shape({\n            pantryId: Yup.number().required(),\n            password: Yup.string().required(),\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required(),\n          })}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            isValid,\n          }) => (\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"pantryId\"\n                    label=\"Pantry ID\"\n                    name=\"pantryId\"\n                    required\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"number\"\n                    value={values.pantryId}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"password\"\n                    name=\"password\"\n                    label={\n                      selectedRadioButton === \"volunteer\"\n                        ? \"Password\"\n                        : \"Admin Password\"\n                    }\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    type=\"password\"\n                    value={values.password}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                    value={values.firstName}\n                    fullWidth\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    fullWidth\n                    required\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    required\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email Address\"\n                    fullWidth\n                    type=\"email\"\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={(e) => {\n                      handleChange(e);\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                style={{\n                  backgroundColor:\n                    !isValid || !values.pantryId\n                      ? COLORS.surface\n                      : COLORS.primary,\n                  color: COLORS.buttonTextColor,\n                }}\n                className={classes.submit}\n                disabled={!isValid || !values.pantryId}\n              >\n                Login\n              </Button>\n              {errorMessage ? (\n                <StyledText style={{ color: COLORS.buttonNegativeColor }}>\n                  {errorMessage}\n                </StyledText>\n              ) : null}\n              {successMessage ? (\n                <StyledText style={{ color: COLORS.buttonPositiveColor }}>\n                  {successMessage}\n                </StyledText>\n              ) : null}\n            </form>\n          )}\n        </Formik>\n        <StyledText\n          style={{ color: COLORS.primary, marginBottom: 8, marginTop: 16 }}\n        >\n          New? Register your pantry to get started.\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/register\");\n          }}\n        >\n          Register Your Pantry\n        </Button>\n        <StyledText\n          style={{ color: COLORS.primary, marginTop: 16, marginBottom: 8 }}\n        >\n          Forgot your Pantry ID?\n        </StyledText>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          style={{\n            backgroundColor: COLORS.primary,\n            color: COLORS.buttonTextColor,\n          }}\n          onClick={() => {\n            history.push(\"/pantry/lookup\");\n          }}\n        >\n          Lookup Pantry ID\n        </Button>\n      </div>\n    </Container>\n  );\n}\n","/Users/nate/nate/pantry-web/src/global/globalState.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/getPantry.ts",[],"/Users/nate/nate/pantry-web/src/components/Header.tsx",[],"/Users/nate/nate/pantry-web/src/screens/ClientCheckin/ClientCheckin.tsx",["156","157","158"],"/Users/nate/nate/pantry-web/src/api/clientCheckIn/checkInClient.ts",[],"/Users/nate/nate/pantry-web/src/api/clientCheckIn/addCheckIn.ts",[],"/Users/nate/nate/pantry-web/src/screens/ClientLookup/ClientLookup.tsx",[],"/Users/nate/nate/pantry-web/src/api/client/lookupClient.ts",[],"/Users/nate/nate/pantry-web/src/screens/PantryLookup/PantryLookup.tsx",[],"/Users/nate/nate/pantry-web/src/api/pantry/lookupPantry.ts",[],"/Users/nate/nate/pantry-web/src/api/client/getClient.ts",["159","160"],"/Users/nate/nate/pantry-web/src/screens/ClientUpload/ClientUpload.tsx",["161","162","163","164","165"],"/Users/nate/nate/pantry-web/src/models/client.schema.ts",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":77,"column":10,"nodeType":"172","messageId":"173","endLine":77,"endColumn":21},{"ruleId":"174","severity":1,"message":"175","line":89,"column":6,"nodeType":"176","endLine":89,"endColumn":8,"suggestions":"177"},{"ruleId":"170","severity":1,"message":"178","line":8,"column":18,"nodeType":"172","messageId":"173","endLine":8,"endColumn":28},{"ruleId":"170","severity":1,"message":"178","line":7,"column":18,"nodeType":"172","messageId":"173","endLine":7,"endColumn":28},{"ruleId":"170","severity":1,"message":"171","line":48,"column":10,"nodeType":"172","messageId":"173","endLine":48,"endColumn":21},{"ruleId":"170","severity":1,"message":"179","line":50,"column":26,"nodeType":"172","messageId":"173","endLine":50,"endColumn":43},{"ruleId":"174","severity":1,"message":"175","line":64,"column":6,"nodeType":"176","endLine":64,"endColumn":8,"suggestions":"180"},{"ruleId":"170","severity":1,"message":"181","line":49,"column":10,"nodeType":"172","messageId":"173","endLine":49,"endColumn":28},{"ruleId":"170","severity":1,"message":"182","line":49,"column":30,"nodeType":"172","messageId":"173","endLine":49,"endColumn":51},{"ruleId":"174","severity":1,"message":"183","line":56,"column":6,"nodeType":"176","endLine":56,"endColumn":8,"suggestions":"184"},{"ruleId":"170","severity":1,"message":"185","line":1,"column":10,"nodeType":"172","messageId":"173","endLine":1,"endColumn":23},{"ruleId":"170","severity":1,"message":"186","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":16},{"ruleId":"170","severity":1,"message":"179","line":44,"column":26,"nodeType":"172","messageId":"173","endLine":44,"endColumn":43},{"ruleId":"170","severity":1,"message":"187","line":45,"column":9,"nodeType":"172","messageId":"173","endLine":45,"endColumn":16},{"ruleId":"170","severity":1,"message":"171","line":46,"column":10,"nodeType":"172","messageId":"173","endLine":46,"endColumn":21},{"ruleId":"174","severity":1,"message":"188","line":59,"column":6,"nodeType":"176","endLine":59,"endColumn":8,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":178,"column":25,"nodeType":"192","messageId":"193","endLine":178,"endColumn":32},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"@typescript-eslint/no-unused-vars","'globalState' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setGlobalState'. Either include them or remove the dependency array.","ArrayExpression",["196"],"'Typography' is defined but never used.","'setSuccessMessage' is assigned a value but never used.",["197"],"'lookupErrorMessage' is assigned a value but never used.","'setLookupErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalState.user' and 'history'. Either include them or remove the dependency array.",["198"],"'OptionalQuery' is defined but never used.","'Client' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setGlobalState'. Either include it or remove the dependency array.",["199"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"200","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [history, setGlobalState]",{"range":"207","text":"208"},{"range":"209","text":"208"},"Update the dependencies array to be: [globalState.user, history]",{"range":"210","text":"211"},"Update the dependencies array to be: [setGlobalState]",{"range":"212","text":"213"},[3254,3256],"[history, setGlobalState]",[1954,1956],[2024,2026],"[globalState.user, history]",[2048,2050],"[setGlobalState]"]